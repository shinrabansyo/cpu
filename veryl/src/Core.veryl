// module 宣言
// io宣言
module Core (
    // クロック・リセット
    i_clk: input clock,
    i_rst: input reset,

    // UART
    o_tx: output logic<1>,
    i_rx: input  logic<1>,

    // SPI
    // o_sclk: output logic<1>,
    // o_mosi: output logic<1>,
    // i_miso: input  logic<1>,

    // GPIO
    o_gpout: output logic<8>,
) {
    // ワイヤ・インタフェース宣言
    // IOBus
    var i_dev_id: logic<32>;

    inst if_io_bus_din : Decoupled #(Width: 32,);
    inst if_io_bus_dout: Decoupled #(Width: 32,);

    // ALU
    var w_command: logic<8> ;
    var w_a      : logic<32>;
    var w_b      : logic<32>;
    var w_zero   : logic<1> ;
    var w_out    : logic<32>;

    // IOBus
    inst io_bus: IOBus #(
        ClockFrequency: 12_000_000,
        UartBaudRate  : 921600    ,
    ) (
        i_clk                   ,
        i_rst                   ,
        i_dev_id                ,
        if_din  : if_io_bus_dout,
        if_dout : if_io_bus_din ,
        o_tx                    ,
        i_rx                    ,
        // o_sclk                  ,
        // o_mosi                  ,
        // i_miso                  ,
        o_gpout  ,
    );

    // メモリ
    var m_regfile: logic<32> [32];

    var w_pc_fetching: logic<32>;
    var r_pc_fetched : logic<32>;
    var w_instr_raw  : logic<48>;

    var w_wen      : logic<4> ;
    var w_ren      : logic<1> ;
    var w_dmem_read: logic<32>;

    inst m_inst_mod: IMemSync (
        i_clk : i_clk        ,
        i_rst : i_rst        ,
        i_clr : 1'h0         ,
        i_mea : 1'h0         ,
        i_wea : 6'h0         ,
        i_adra: 32'h0        ,
        i_da  : 48'h0        ,
        i_meb : 1'b1         ,
        i_adrb: w_pc_fetching,
        o_qb  : w_instr_raw  ,
    );

    inst m_data_mod: DMemSync #(
        WORD_SIZE: 2048,
    ) (
        i_clk : i_clk                   ,
        i_rst : i_rst                   ,
        i_clr : 1'h0                    ,
        i_mea : |w_wen                  ,
        i_wea : w_wen                   ,
        i_adra: w_out                   ,
        i_da  : m_regfile[w_instr.rs2_s],
        i_meb : w_ren                   ,
        i_adrb: w_out                   ,
        o_qb  : w_dmem_read             ,
    );

    // 命令フェッチ
    var r_load_ready  : logic<1>;
    var w_branch_taken: logic<1>;

    // プログラムカウンタ
    always_comb {
        w_pc_fetching = case {w_instr.opcode_sub, w_instr.opcode} {
            BEQ, BNE, BLT, BLE: if w_branch_taken {
                r_pc_fetched + w_instr.imm_b_sext
            } else {
                r_pc_fetched + 32'h6
            },
            JAL                 : w_out,
            LW, LH, LB, LHU, LBU: if !r_load_ready {
                r_pc_fetched
            } else {
                r_pc_fetched + 32'h6
            },
            IN: if !if_io_bus_din.valid {
                r_pc_fetched
            } else {
                r_pc_fetched + 32'h6
            },
            OUT: if !if_io_bus_dout.ready {
                r_pc_fetched
            } else {
                r_pc_fetched + 32'h6
            },
            default: r_pc_fetched + 32'h6,
        };
    }

    always_ff (i_clk, i_rst) {
        if_reset {
            r_pc_fetched = 32'h0;
        } else {
            r_pc_fetched = w_pc_fetching;
        }
    }

    // 命令デコード
    struct Instructure {
        opcode    : logic<5> ,
        opcode_sub: logic<3> ,
        rd        : logic<5> ,
        rs1       : logic<5> ,
        rs1_i     : logic<5> ,
        rs1_s     : logic<5> ,
        rs2       : logic<5> ,
        rs2_s     : logic<5> ,
        imm       : logic<32>,
        imm_b     : logic<25>,
        imm_b_sext: logic<32>,
    }

    var w_instr: Instructure;

    assign w_instr.opcode     = w_instr_raw[4:0];
    assign w_instr.opcode_sub = w_instr_raw[7:5];
    assign w_instr.rd         = w_instr_raw[12:8];
    assign w_instr.rs1        = w_instr_raw[17:13];
    assign w_instr.rs1_i      = {2'b0, w_instr_raw[15:13]};
    assign w_instr.rs1_s      = {2'b0, w_instr_raw[15:13]};
    assign w_instr.rs2        = w_instr_raw[22:18];
    assign w_instr.rs2_s      = w_instr_raw[12:8];
    assign w_instr.imm        = w_instr_raw[47:16];
    assign w_instr.imm_b      = w_instr_raw[47:23];
    assign w_instr.imm_b_sext = {w_instr_raw[47] repeat 7, w_instr_raw[47:23]};

    // 命令実行
    const NOP : logic<8> = (8'h0 << 5) | 8'h0;
    const ADD : logic<8> = (8'h1 << 5) | 8'h1;
    const SUB : logic<8> = (8'h2 << 5) | 8'h1;
    const ADDI: logic<8> = (8'h1 << 5) | 8'h2;
    const SUBI: logic<8> = (8'h2 << 5) | 8'h2;
    const BEQ : logic<8> = (8'h0 << 5) | 8'h3;
    const BNE : logic<8> = (8'h1 << 5) | 8'h3;
    const BLT : logic<8> = (8'h2 << 5) | 8'h3;
    const BLE : logic<8> = (8'h3 << 5) | 8'h3;
    const JAL : logic<8> = (8'h4 << 5) | 8'h3;
    const LW  : logic<8> = (8'h0 << 5) | 8'h4;
    const LH  : logic<8> = (8'h1 << 5) | 8'h4;
    const LB  : logic<8> = (8'h2 << 5) | 8'h4;
    const LHU : logic<8> = (8'h3 << 5) | 8'h4;
    const LBU : logic<8> = (8'h4 << 5) | 8'h4;
    const SW  : logic<8> = (8'h0 << 5) | 8'h5;
    const SH  : logic<8> = (8'h1 << 5) | 8'h5;
    const SB  : logic<8> = (8'h2 << 5) | 8'h5;
    const IN  : logic<8> = (8'h0 << 5) | 8'h6;
    const OUT : logic<8> = (8'h1 << 5) | 8'h6;
    const AND : logic<8> = (8'h0 << 5) | 8'h7;
    const OR  : logic<8> = (8'h1 << 5) | 8'h7;
    const XOR : logic<8> = (8'h2 << 5) | 8'h7;
    const SRL : logic<8> = (8'h3 << 5) | 8'h7;
    const SRA : logic<8> = (8'h4 << 5) | 8'h7;
    const SLL : logic<8> = (8'h5 << 5) | 8'h7;
    const ANDI: logic<8> = (8'h0 << 5) | 8'h8;
    const ORI : logic<8> = (8'h1 << 5) | 8'h8;
    const XORI: logic<8> = (8'h2 << 5) | 8'h8;
    const SRLI: logic<8> = (8'h3 << 5) | 8'h8;
    const SRAI: logic<8> = (8'h4 << 5) | 8'h8;
    const SLLI: logic<8> = (8'h5 << 5) | 8'h8;

    enum InstKind: logic<3> {
        R = 3'h0,
        I = 3'h1,
        B = 3'h2,
        S = 3'h3,
        Nop = 3'h7,
    }

    let inst_kind: InstKind = case w_instr.opcode {
        1         : InstKind::R,
        2         : InstKind::I,
        3         : case w_instr.opcode_sub {
            0, 1, 2, 3: InstKind::B, // Branch 系
            4         : InstKind::I, // Jump 系
            default   : InstKind::Nop,
        },
        4      : InstKind::I,
        5      : InstKind::S,
        6      : case w_instr.opcode_sub {
            0      : InstKind::I, // in
            1      : InstKind::S, // out
            default: InstKind::Nop,
        },
        7      : InstKind::R,
        8      : InstKind::I,
        default: InstKind::Nop,
    };

    assign w_command = case {w_instr.opcode_sub, w_instr.opcode} {
        ADD    : 8'h1,
        SUB    : 8'h2,
        ADDI   : 8'h1,
        SUBI   : 8'h2,
        BEQ    : 8'h2,
        BNE    : 8'h2,
        BLT    : 8'h2,
        BLE    : 8'h2,
        JAL    : 8'h1,
        LW     : 8'h1,
        LH     : 8'h1,
        LB     : 8'h1,
        LHU    : 8'h1,
        LBU    : 8'h1,
        SW     : 8'h1,
        SH     : 8'h1,
        SB     : 8'h1,
        IN     : 8'h1,
        OUT    : 8'h1,
        AND    : 8'h3,
        OR     : 8'h4,
        XOR    : 8'h5,
        SRL    : 8'h6,
        SRA    : 8'h7,
        SLL    : 8'h8,
        ANDI   : 8'h3,
        ORI    : 8'h4,
        XORI   : 8'h5,
        SRLI   : 8'h6,
        SRAI   : 8'h7,
        SLLI   : 8'h8,
        default: 8'h0,
    };
    assign w_a = case inst_kind {
        InstKind::R: m_regfile[w_instr.rs1],
        InstKind::I: m_regfile[w_instr.rs1_i],
        InstKind::B: m_regfile[w_instr.rs1],
        InstKind::S: m_regfile[w_instr.rs1_s],
        default    : 0,
    };
    assign w_b = case inst_kind {
        InstKind::R: m_regfile[w_instr.rs2],
        InstKind::I: w_instr.imm,
        InstKind::B: m_regfile[w_instr.rs2],
        InstKind::S: w_instr.imm,
        default    : 0,
    };

    inst alu: Alu (
        i_command: w_command,
        i_a      : w_a      ,
        i_b      : w_b      ,
        o_zero   : w_zero   ,
        o_out    : w_out    ,
    );

    always_comb {
        // メモリに書き込むデータを選択
        case {w_instr.opcode_sub, w_instr.opcode} {
            SW     : w_wen = 4'b1111;
            SH     : w_wen = 4'b0011;
            SB     : w_wen = 4'b0001;
            default: w_wen = 4'b0000;
        }

        // ロード命令のとき，read_enable = 1
        case {w_instr.opcode_sub, w_instr.opcode} {
            LW, LH, LB, LHU, LBU: w_ren = 1'b1;
            default             : w_ren = 1'b0;
        }
    }

    // 同期読み出しの完了を示すフラグ
    always_ff (i_clk, i_rst) {
        if_reset {
            r_load_ready = 0;
        } else {
            // 初期状態: r_load_ready = 0
            case {w_instr.opcode_sub, w_instr.opcode} {
                LW, LH, LB, LHU, LBU: {
                                          // 1. ロード命令 && r_load_ready = 0
                                          if !r_load_ready {
                                              r_load_ready = 1;
                                              // 2. ロード命令 && r_load_ready = 1 -> 読み出し完了，初期状態に戻す
                                          } else {
                                              r_load_ready = 0;
                                          }
                                      }
                default: r_load_ready = 0;
            }
        }
    }

    // デバイス読み書き
    always_comb {
        i_dev_id = w_out;

        if_io_bus_din.ready = {w_instr.opcode_sub, w_instr.opcode} == IN;

        if_io_bus_dout.valid = {w_instr.opcode_sub, w_instr.opcode} == OUT;
        if_io_bus_dout.bits  = m_regfile[w_instr.rs2_s];
    }

    // 分岐判定
    always_comb {
        w_branch_taken = case {w_instr.opcode_sub, w_instr.opcode} {
            BEQ    : w_zero,
            BNE    : !w_zero,
            BLT    : w_out[31],
            BLE    : w_out[31] || w_zero,
            JAL    : 1'h1,
            default: 1'h0,
        };
    }

    // レジスタアクセス
    always_ff (i_clk, i_rst) {
        if_reset {
            for i: u32 in 0..32 {
                m_regfile[i] = 32'h0;
            }
        } else if w_instr.rd != 0 {
            m_regfile[w_instr.rd] = case {w_instr.opcode_sub, w_instr.opcode} {
                BEQ, BNE, BLT, BLE, JAL: r_pc_fetched + 32'h6,
                LW                     : w_dmem_read,
                LH                     : {w_dmem_read[15] repeat 16, w_dmem_read[0+:16]},
                LHU                    : {16'b0, w_dmem_read[0+:16]},
                LB                     : {w_dmem_read[7] repeat 24, w_dmem_read[0+:8]},
                LBU                    : {24'b0, w_dmem_read[0+:8]},
                SW, SH, SB             : m_regfile[w_instr.rd],
                IN                     : if if_io_bus_din.valid {
                    if_io_bus_din.bits
                } else {
                    m_regfile[w_instr.rd]
                },
                OUT    : m_regfile[w_instr.rd],
                default: w_out,
            };
        }
    }
}
