module Spi #(
    param ClockFrequency: u32 = 15_000_000,
) (
    i_clk: input clock,
    i_rst: input reset,

    o_mosi: output logic,
    i_miso: input  logic,
    o_sclk: output logic,

    if_din : modport Decoupled::receiver, // 任意のデータを送るとき
    if_dout: modport Decoupled::sender  , // データを読み取るとき

    if_clkshamt: modport Decoupled::receiver   , // シフト量(shift amout) + 1
    o_clkshamt : output  logic              <3>,

    if_spi_mode: modport Decoupled::receiver   , // SPIモード
    o_spi_mode : output  logic              <2>,
    // SCLK クロックの速度 = ClockFrequency >> (clkshamt + 1)
) {
    // クロックの分周用信号
    var r_sclk        : logic   ;
    var r_sclk_counter: logic<9>;
    var r_clkshamt    : logic<3>;
    var w_posedge     : logic   ;
    var w_negedge     : logic   ;


    // データの送受信用信号
    var r_shift_reg     : logic<8>;
    var r_bit_counter   : logic<4>;
    var r_busy          : logic   ;
    var r_miso_buf      : logic   ;
    var r_spi_mode_ready: logic   ;
    var r_clkshamt_ready: logic   ;
    var r_out_valid     : logic   ;
    var r_cpol          : logic   ; // アイドル状態でのクロックのHIGH/LOW (clocl polarity)
    var r_cpha          : logic   ; // サンプリングの極性 posedge/negedge (clock phase)
    var w_mode_1_2      : logic   ;
    var r_is_first_sclk : logic   ;

    assign o_clkshamt = r_clkshamt;
    assign o_spi_mode = {r_cpol, r_cpha};

    // クロックの分周
    assign o_sclk = r_sclk;

    always_comb {
        if r_busy && r_sclk_counter == 0 {
            w_posedge = ~r_sclk;
            w_negedge = r_sclk;
        } else {
            w_posedge = 0;
            w_negedge = 0;
        }
    }

    always_ff {
        if_reset {
            r_sclk          = 0;
            r_sclk_counter  = 0;
            r_is_first_sclk = 1;
        } else if r_busy {
            if r_sclk_counter == 0 {
                r_is_first_sclk = 0;
                r_sclk_counter  = (1 >> r_clkshamt) - 1;
                if !(r_bit_counter == 1 && r_sclk == r_cpol && r_cpha) {
                    r_sclk = ~r_sclk;
                }
            } else {
                r_sclk_counter -= 1;
            }
        } else {
            // din と clkshamt が同じクロックで設定された場合への対処
            if if_din.valid && if_clkshamt.valid && if_clkshamt.ready {
                r_sclk_counter = (1 << (if_clkshamt.bits + 1)) - 1;
            } else {
                r_sclk_counter = (1 << (r_clkshamt + 1)) - 1;
            }

            if if_spi_mode.valid && if_spi_mode.ready {
                r_sclk = if_spi_mode.bits[1];
            } else {
                r_sclk = r_cpol;
            }
        }
    }

    // CPU 読み取りデータの準備
    assign if_dout.bits  = r_shift_reg;
    assign if_dout.valid = r_out_valid;

    always_ff {
        if_reset {
            r_out_valid = 0;
        } else if r_busy && r_bit_counter == 0 {
            r_out_valid = 1;
        } else if if_dout.valid && if_dout.ready {
            r_out_valid = 0;
        }
    }

    // clkShamt の準備
    assign if_clkshamt.ready = r_clkshamt_ready;

    always_ff {
        if_reset {
            r_clkshamt_ready = 1;
            r_clkshamt       = 0;
        } else if r_busy && r_bit_counter == 0 {
            r_clkshamt_ready = 1;
        } else if if_clkshamt.valid && if_clkshamt.ready {
            r_clkshamt_ready = 0;
            r_clkshamt       = if_clkshamt.bits;
        }
    }

    // spiMode の準備
    // mode 0: cpol = 0, cpha = 0 (データをposedgeでサンプリング / negedgeでシフト)
    // mode 1: cpol = 0, cpha = 1 (データをnegedgeでサンプリング / posedgeでシフト)
    // mode 2: cpol = 1, cpha = 0 (データをnegedgeでサンプリング / posedgeでシフト)
    // mode 3: cpol = 1, cpha = 1 (データをposedgeでサンプリング / negedgeでシフト)
    assign w_mode_1_2        = r_cpol ^ r_cpha;
    assign if_spi_mode.ready = r_spi_mode_ready;

    always_ff {
        if_reset {
            r_cpol           = 0;
            r_cpha           = 0;
            r_spi_mode_ready = 1;
        } else if r_busy && r_bit_counter == 0 {
            r_spi_mode_ready = 1;
        } else if if_spi_mode.valid && if_spi_mode.ready {
            r_cpol           = if_spi_mode.bits[1];
            r_cpha           = if_spi_mode.bits[0];
            r_spi_mode_ready = 0;
        }
    }

    // 送受信処理
    assign if_din.ready = if_din.valid && r_busy && r_bit_counter == 0;
    assign o_mosi       = r_shift_reg[7];

    always_ff {
        if_reset {
            r_shift_reg    = 0;
            r_busy         = 0;
            r_bit_counter  = 0;
            r_miso_buf     = 0;
        } else if r_busy && r_bit_counter == 0 {
            r_busy = 0;
        } else if !r_busy && if_din.valid { // 送信開始処理
            r_shift_reg   = if_din.bits;
            r_busy        = 1;
            r_bit_counter = 8; 
        } else if r_busy && r_bit_counter != 0 { // 送受信処理の本体
            if w_mode_1_2 {
                // posedge かつ mode 1 の最初のクロックでない場合
                if w_posedge && !(r_cpha && r_is_first_sclk) {
                    // シフト
                    r_shift_reg   = {r_shift_reg[6:0], r_miso_buf};
                    r_bit_counter = r_bit_counter - 1;
                }
                if w_negedge {
                    // サンプリング
                    r_miso_buf = i_miso;
                }
            } else {
                if w_negedge && !(r_cpol && r_is_first_sclk) {
                    // シフト
                    r_shift_reg   = {r_shift_reg[6:0], r_miso_buf};
                    r_bit_counter = r_bit_counter - 1;
                }
                if w_posedge {
                    // サンプリング
                    r_miso_buf = i_miso;
                }
            }
        }
    }
}
