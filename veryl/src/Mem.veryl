//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific
// language governing permissions and limitations under the License.
//
// MIT License
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files...

// Copyright:
// This file is originally based on:
// https://github.com/veryl-lang/veryl/blob/6d3c23ce2d176a192ad67dcd99c97914cf5d46cb/crates/std/veryl/src/ram/ram.veryl

module Div6 (
    x        : input  logic<32>,
    quotient : output logic<32>,
    remainder: output logic<32>,
) {

    // 6 の除算用マジックナンバー:
    // 2^34/6 = 2863311530.6666... の切り上げ値 = 2863311531 = 32'hAAAAAAAB
    let MAGIC: logic<32> = 32'hAAAAAAAB;

    // 64ビットの積を用いて計算
    let prod: logic<64> = x * MAGIC;

    // 商は上位 64-34=30 ビット (32ビットに収まる)
    let shift   : logic<64> = prod >> 34;
    assign quotient = shift[31:0];

    // 余りは、 x から商に6をかけた値を引く
    assign remainder = x - quotient * 6;
}

module IMemSync #(
    param RAM_INIT: u32 = 0,
    param WORD_SIZE    : u32       = 1024                 , // 1024個の命令を保持
    param ADDRESS_WIDTH: u32       = 32                   , // アドレスは常に32bit
    param ADDRESS_MAX  : u32       = 6 * $clog2(WORD_SIZE), // アドレスの最大値 = 命令サイズ*WORD_SIZE
    param DATA_WIDTH   : u32       = 48                   , // 命令長 48bit
    param DATA_TYPE    : type      = logic<DATA_WIDTH>    ,
    param BUFFER_OUT   : bit       = 1                    , // 同期読み出し
    param INITIAL_VALUE: DATA_TYPE = 0 as DATA_TYPE       ,
) (
    i_clk : input  clock                    , // クロック
    i_rst : input  reset                    , // リセット
    i_clr : input  logic                    , // リセット2
    i_mea : input  logic                    , // セレクト (w)
    i_wea : input  logic    <DATA_WIDTH / 8>, // バイト単位の書き込み許可 (w)
    i_adra: input  logic    <ADDRESS_WIDTH> , // アドレス (w)
    i_da  : input  DATA_TYPE                , // データ (w)
    i_meb : input  logic                    , // セレクト (r)
    i_adrb: input  logic    <ADDRESS_WIDTH> , // アドレス (r)
    o_qb  : output DATA_TYPE, // データ (r)
) {
    const BANK_NUM: u32 = DATA_WIDTH / 8;

    var adra_mod : logic<32>;
    var adrb_mod : logic<32>;
    var adra_quot: logic<32>;
    var adrb_quot: logic<32>;

    inst div6_a: Div6 (
        x        : i_adra   ,
        quotient : adra_quot,
        remainder: adra_mod ,
    );
    inst div6_b: Div6 (
        x        : i_adrb   ,
        quotient : adrb_quot,
        remainder: adrb_mod ,
    );
    // let adra_mod: logic<32> = i_adra % BANK_NUM;
    // let adrb_mod: logic<32> = i_adrb % BANK_NUM;

    var adra_mod_buf: logic<32>;
    var adrb_mod_buf: logic<32>;

    always_ff {
        if_reset {
            adra_mod_buf = 0;
            adrb_mod_buf = 0;
        } else {
            adra_mod_buf = adra_mod;
            adrb_mod_buf = adrb_mod;
        }
    }

    let i_wea_table: logic<($bits(i_wea) << 1)> = {i_wea, i_wea};
    var data_table : logic<DATA_WIDTH * 2>     ;
    var q_buf      : logic<DATA_WIDTH * 2>     ;
    assign o_qb        = q_buf[8 * adrb_mod_buf+:DATA_WIDTH];
    for bank_id in 0..BANK_NUM :g_bank {
        const BANK_ADDRESS_WIDTH: u32                                            = $clog2(WORD_SIZE);
        var bank_adra         : logic<BANK_ADDRESS_WIDTH>                     ;
        var bank_adrb         : logic<BANK_ADDRESS_WIDTH>                     ;
        var ram_data          : logic<$bits(DATA_TYPE) / BANK_NUM> [WORD_SIZE];
        var q                 : logic<$bits(DATA_TYPE) / BANK_NUM>            ;

        // バンクアドレス計算用の一時変数
        var tmpa: logic<32>;
        var tmpb: logic<32>;

        always_comb {
            // ワードサイズが 2^n じゃないと，バンク振り分けで除算が必要
            // バンク数 N のとき，読みたいアドレスが...
            // 整列されてる場合： 各バンク内のメモリアドレス = 入力アドレス / N
            // 非整列の場合： どれくらいズレているかによって振り分け方が変わる
            //   入力アドレス % N == 1 の時：
            //     バンク0内のメモリアドレス = 入力アドレス / N + 1
            //     バンク1～(N-1)内のメモリアドレス = 入力アドレス / N
            //   入力アドレス % N == 2 の時：
            //     バンク0～1内のメモリアドレス = 入力アドレス / N + 1
            //     バンク2～(N-1)内のメモリアドレス = 入力アドレス / N
            //  ...
            //   入力アドレス % N == x の時：
            //     バンク0～(x-1)内のメモリアドレス = 入力アドレス / N + 1
            //     バンク(x)～(N-1)内のメモリアドレス = 入力アドレス / N
            if bank_id <: adra_mod {
                // tmpa = i_adra / BANK_NUM + 1;
                tmpa = adra_quot + 1;
            } else {
                // tmpa = i_adra / BANK_NUM;
                tmpa = adra_quot;
            }
            bank_adra = tmpa[BANK_ADDRESS_WIDTH - 1:0];

            if bank_id <: adrb_mod {
                // tmpb = i_adrb / BANK_NUM + 1;
                tmpb = adrb_quot + 1;
            } else {
                // tmpb = i_adrb / BANK_NUM;
                tmpb = adrb_quot;
            }
            bank_adrb = tmpb[BANK_ADDRESS_WIDTH - 1:0];
        }

        initial {
            // SystemVerilogでは $readmemh() の引数が文字列リテラルに限られており，変数は使用不可
            if RAM_INIT {
                if bank_id == 0 {
                    $readmemh("./test/tmp_inst_bank0.hex", ram_data);
                } else if bank_id == 1 {
                    $readmemh("./test/tmp_inst_bank1.hex", ram_data);
                } else if bank_id == 2 {
                    $readmemh("./test/tmp_inst_bank2.hex", ram_data);
                } else if bank_id == 3 {
                    $readmemh("./test/tmp_inst_bank3.hex", ram_data);
                } else if bank_id == 4 {
                    $readmemh("./test/tmp_inst_bank4.hex", ram_data);
                } else if bank_id == 5 {
                    $readmemh("./test/tmp_inst_bank5.hex", ram_data);
                }
            }
        }

        //     00 01 02 03
        // ---------------
        // 00: ef be ad de <- when adra_mod == 0
        // 04: 00 00 00 00    {bank0, bank1, bank2, bank3} <= {da0, da1, da2, da3}
        // ---------------
        // 00: 00 ef be ad <- when adra_mod == 1
        // 04: de 00 00 00    {bank0, bank1, bank2, bank3} <= {da3, da0, da1, da2}
        // ---------------
        // 00: 00 00 ef be <- when adra_mod == 2
        // 04: ad de 00 00    {bank0, bank1, bank2, bank3} <= {da2, da3, da0, da1}
        // ---------------
        // 00: 00 00 00 ef <- when adra_mod == 3
        // 04: be ad de 00    {bank0, bank1, bank2, bank3} <= {da1, da2, da3, da0}
        // ---------------
        always_ff {
            if i_mea && i_wea_table[BANK_NUM - adra_mod + bank_id] {
                // ram_data[bank_adra] = i_da[((adra_mod + bank_id) % BANK_NUM)*8+:8]; と同じ
                ram_data[bank_adra] = data_table[(BANK_NUM - adra_mod + bank_id) * 8+:8];
            }
        }

        // i_da: 0xdeadbeef
        // data_table: 0xdeadbeef[deadbeef]
        // data_table: 0xdeadbe[efdeadbe]ef
        // data_table: 0xdead[beefdead]beef

        always_comb {
            q_buf[bank_id * 8+:8]                   = q;
            q_buf[bank_id * 8 + DATA_WIDTH+:8]      = q;
            data_table[bank_id * 8+:8]              = i_da[bank_id * 8+:8];
            data_table[bank_id * 8 + DATA_WIDTH+:8] = i_da[bank_id * 8+:8];
        }

        if !BUFFER_OUT :g_out {
            always_comb {
                // Write throughモード: 同じアドレスに書き込みがある場合は書き込みデータを返す
                if i_mea && i_wea[BANK_NUM - adra_mod + bank_id] && bank_adra == bank_adrb {
                    q = data_table[(BANK_NUM - adra_mod + bank_id) * 8+:8];
                } else {
                    q = ram_data[bank_adrb];
                }
            }
        } else {
            always_ff {
                if i_meb {
                    // Write throughモード: 同じアドレスに書き込みがある場合は書き込みデータを返す
                    if i_mea && i_wea[BANK_NUM - adra_mod + bank_id] && bank_adra == bank_adrb {
                        q = data_table[(BANK_NUM - adra_mod + bank_id) * 8+:8];
                    } else {
                        q = ram_data[bank_adrb];
                    }
                }
            }
        }
    }
}

module DMemSync #(
    param WORD_SIZE    : u32       = 1024                 , // 1024個の命令を保持
    param ADDRESS_WIDTH: u32       = 32                   , // アドレスは常に32bit
    param ADDRESS_MAX  : u32       = 4 * $clog2(WORD_SIZE), // アドレスの最大値 = 命令サイズ*WORD_SIZE
    param DATA_WIDTH   : u32       = 32                   , // 命令長 48bit
    param DATA_TYPE    : type      = logic<DATA_WIDTH>    ,
    param BUFFER_OUT   : bit       = 1                    , // 同期読み出し
    param INITIAL_VALUE: DATA_TYPE = 0 as DATA_TYPE       ,
) (
    i_clk : input  clock                    , // クロック
    i_rst : input  reset                    , // リセット
    i_clr : input  logic                    , // リセット2
    i_mea : input  logic                    , // セレクト (w)
    i_wea : input  logic    <DATA_WIDTH / 8>, // バイト単位の書き込み許可 (w)
    i_adra: input  logic    <ADDRESS_WIDTH> , // アドレス (w)
    i_da  : input  DATA_TYPE                , // データ (w)
    i_meb : input  logic                    , // セレクト (r)
    i_adrb: input  logic    <ADDRESS_WIDTH> , // アドレス (r)
    o_qb  : output DATA_TYPE, // データ (r)
) {
    const BANK_NUM: u32 = DATA_WIDTH / 8;

    let adra_mod: logic<32> = i_adra % BANK_NUM;
    let adrb_mod: logic<32> = i_adrb % BANK_NUM;

    var adra_mod_buf: logic<32>;
    var adrb_mod_buf: logic<32>;

    always_ff {
        if_reset {
            adra_mod_buf = 0;
            adrb_mod_buf = 0;
        } else {
            adra_mod_buf = adra_mod;
            adrb_mod_buf = adrb_mod;
        }
    }

    var data_table: logic<DATA_WIDTH * 2>;
    var q_buf     : logic<DATA_WIDTH * 2>;
    assign o_qb       = q_buf[8 * adrb_mod_buf+:DATA_WIDTH];
    for bank_id in 0..BANK_NUM :g_bank {
        const BANK_ADDRESS_WIDTH: u32                                            = $clog2(WORD_SIZE);
        var bank_adra         : logic<BANK_ADDRESS_WIDTH>                     ;
        var bank_adrb         : logic<BANK_ADDRESS_WIDTH>                     ;
        var ram_data          : logic<$bits(DATA_TYPE) / BANK_NUM> [WORD_SIZE];
        var q                 : logic<$bits(DATA_TYPE) / BANK_NUM>            ;

        // バンクアドレス計算用の一時変数
        var tmpa: logic<32>;
        var tmpb: logic<32>;

        always_comb {
            // ワードサイズが 2^n じゃないと，バンク振り分けで除算が必要
            // バンク数 N のとき，読みたいアドレスが...
            // 整列されてる場合： 各バンク内のメモリアドレス = 入力アドレス / N
            // 非整列の場合： どれくらいズレているかによって振り分け方が変わる
            //   入力アドレス % N == 1 の時：
            //     バンク0内のメモリアドレス = 入力アドレス / N + 1
            //     バンク1～(N-1)内のメモリアドレス = 入力アドレス / N
            //   入力アドレス % N == 2 の時：
            //     バンク0～1内のメモリアドレス = 入力アドレス / N + 1
            //     バンク2～(N-1)内のメモリアドレス = 入力アドレス / N
            //  ...
            //   入力アドレス % N == x の時：
            //     バンク0～(x-1)内のメモリアドレス = 入力アドレス / N + 1
            //     バンク(x)～(N-1)内のメモリアドレス = 入力アドレス / N
            if bank_id <: adra_mod {
                tmpa = i_adra / BANK_NUM + 1;
            } else {
                tmpa = i_adra / BANK_NUM;
            }
            bank_adra = tmpa[BANK_ADDRESS_WIDTH - 1:0];

            if bank_id <: adrb_mod {
                tmpb = i_adrb / BANK_NUM + 1;
            } else {
                tmpb = i_adrb / BANK_NUM;
            }
            bank_adrb = tmpb[BANK_ADDRESS_WIDTH - 1:0];
        }

        initial {
            // SystemVerilogでは $readmemh() の引数が文字列リテラルに限られており，変数は使用不可
            if bank_id == 0 {
                $readmemh("./test/tmp_data_bank0.hex", ram_data);
            } else if bank_id == 1 {
                $readmemh("./test/tmp_data_bank1.hex", ram_data);
            } else if bank_id == 2 {
                $readmemh("./test/tmp_data_bank2.hex", ram_data);
            } else if bank_id == 3 {
                $readmemh("./test/tmp_data_bank3.hex", ram_data);
            }
        }

        //     00 01 02 03
        // ---------------
        // 00: ef be ad de <- when adra_mod == 0
        // 04: 00 00 00 00    {bank0, bank1, bank2, bank3} <= {da0, da1, da2, da3}
        // ---------------
        // 00: 00 ef be ad <- when adra_mod == 1
        // 04: de 00 00 00    {bank0, bank1, bank2, bank3} <= {da3, da0, da1, da2}
        // ---------------
        // 00: 00 00 ef be <- when adra_mod == 2
        // 04: ad de 00 00    {bank0, bank1, bank2, bank3} <= {da2, da3, da0, da1}
        // ---------------
        // 00: 00 00 00 ef <- when adra_mod == 3
        // 04: be ad de 00    {bank0, bank1, bank2, bank3} <= {da1, da2, da3, da0}
        // ---------------
        always_ff {
            if i_mea && i_wea[BANK_NUM - adra_mod + bank_id] {
                // ram_data[bank_adra] = i_da[((adra_mod + bank_id) % BANK_NUM)*8+:8]; と同じ
                ram_data[bank_adra] = data_table[(BANK_NUM - adra_mod + bank_id) * 8+:8];
            }
        }

        always_comb {
            q_buf[bank_id * 8+:8]                   = q;
            q_buf[bank_id * 8 + DATA_WIDTH+:8]      = q;
            data_table[bank_id * 8+:8]              = i_da[bank_id * 8+:8];
            data_table[bank_id * 8 + DATA_WIDTH+:8] = i_da[bank_id * 8+:8];
        }

        if !BUFFER_OUT :g_out {
            always_comb {
                // Write throughモード: 同じアドレスに書き込みがある場合は書き込みデータを返す
                if i_mea && i_wea[BANK_NUM - adra_mod + bank_id] && bank_adra == bank_adrb {
                    q = data_table[(BANK_NUM - adra_mod + bank_id) * 8+:8];
                } else {
                    q = ram_data[bank_adrb];
                }
            }
        } else {
            always_ff {
                if i_meb {
                    // Write throughモード: 同じアドレスに書き込みがある場合は書き込みデータを返す
                    if i_mea && i_wea[BANK_NUM - adra_mod + bank_id] && bank_adra == bank_adrb {
                        q = data_table[(BANK_NUM - adra_mod + bank_id) * 8+:8];
                    } else {
                        q = ram_data[bank_adrb];
                    }
                }
            }
        }
    }
}
