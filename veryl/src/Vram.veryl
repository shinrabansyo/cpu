module VramSync #(
    param OUT_MODE     : u32       = 2                                                                , // 1: 24bit フルカラー, 2: 16色モード
    param WIDTH        : u32       = 128                                                              , // 画面横幅
    param HEIGHT       : u32       = 128                                                              , // 画面縦幅
    param WORD_SIZE    : u32       = if OUT_MODE == 1 ? WIDTH * HEIGHT * 3 : (WIDTH * HEIGHT + 1) >> 1, // 総ピクセル数 * 1ピクセルあたりのバイト数
    param DATA_WIDTH   : u32       = 8                                                                ,
    param DATA_TYPE    : type      = logic<DATA_WIDTH>                                                ,
    param ADDRESS_WIDTH: u32       = $clog2(WORD_SIZE)                                                ,
    param ADDRESS_MAX  : u32       = DATA_WIDTH * $clog2(WORD_SIZE)                                   , // アドレスの最大値 = 命令サイズ*WORD_SIZE
    param BUFFER_OUT   : bit       = 1                                                                , // 同期読み出し
    param INITIAL_VALUE: DATA_TYPE = 0 as DATA_TYPE                                                   ,
) (
    i_clk : input clock                    , // クロック
    i_rst : input reset                    , // リセット
    i_clr : input logic                    , // リセット2
    i_mea : input logic                    , // セレクト (w)
    i_wea : input logic    <DATA_WIDTH / 8>, // バイト単位の書き込み許可 (w)
    i_adra: input logic    <ADDRESS_WIDTH> , // アドレス (w)
    i_da  : input DATA_TYPE                , // データ (w)
    // i_meb : input  logic                    , // セレクト (r)
    // i_adrb: input  logic    <ADDRESS_WIDTH> , // アドレス (r)
    // o_qb  : output DATA_TYPE                , // データ (r)

    i_clk_video: input  'video clock                       ,
    i_rst_video: input  'video reset                       ,
    i_mev      : input  'video logic                       ,
    i_adrv     : input  'video logic    <$clog2(WORD_SIZE)>,
    o_qv       : output 'video DATA_TYPE                   ,
) {
    #[allow(missing_reset_statement)]
    var ram_data: logic<$bits(DATA_TYPE)> [WORD_SIZE];
    // var r_qb     : logic<$bits(DATA_TYPE)>            ;
    var r_qv: 'video logic<$bits(DATA_TYPE)>;

    initial {
        // $readmemh("ram_data.hex", ram_data);
    }

    always_ff (i_clk, i_rst) {
        if_reset {
            for i: u32 in 0..WORD_SIZE {
                ram_data[i] = 0;
            }
        } else {
            if i_mea && i_wea {
                ram_data[i_adra] = i_da;
            }
        }
    }

    always_comb {
        // o_qb = r_qb;
        o_qv = r_qv;
    }

    if !BUFFER_OUT :g_out {
        // always_comb {
        //     if i_mea && i_wea && i_adra == i_adrb {
        //         r_qb = i_da;
        //     } else {
        //         r_qb = ram_data[i_adrb];
        //     }
        // }
        unsafe (cdc) {
            always_comb {
                if i_mea && i_wea && i_adra == i_adrv {
                    r_qv = i_da;
                } else {
                    r_qv = ram_data[i_adrv];
                }
            }
        }
    } else {
        // always_ff (i_clk, i_rst) {
        //     if_reset {
        //         r_qb = 0;
        //     } else {
        //         if i_mea && i_wea && i_adra == i_adrb {
        //             r_qb = i_da;
        //         } else {
        //             r_qb = ram_data[i_adrb];
        //         }
        //     }
        // }

        unsafe (cdc) {
            always_ff (i_clk_video, i_rst_video) {
                if_reset {
                    r_qv = 0;
                } else {
                    if i_mea && i_wea && i_adra == i_adrv {
                        r_qv = i_da;
                    } else {
                        r_qv = ram_data[i_adrv];
                    }
                }
            }
        }
    }
}
