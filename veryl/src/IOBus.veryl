module IOBus #(
    param ClockFrequency: u32 = 15_000_000, // default 15Mhz
    param UartBaudRate  : u32 = 115200    , // default 115200bps
) (
    // クロック・リセット
    i_clk: input clock,
    i_rst: input reset,

    // デバイス制御
    i_dev_id: input   logic              <32>,
    if_din  : modport Decoupled::receiver    ,
    if_dout : modport Decoupled::sender      ,

    // UART
    o_tx: output logic<1>,
    i_rx: input  logic<1>,

    // SPI
    // o_sclk: output logic<1>,
    // o_mosi: output logic<1>,
    // i_miso: input  logic<1>,

    // GPIO
    o_gpout: output logic<8>,
) {
    // UART
    inst if_uart_tx: Decoupled #(Width: 8,);
    inst if_uart_rx: Decoupled #(Width: 8,);
    var uart_rx_overrun: logic<1>;

    inst uart_tx: UartTx #(
        ClockFrequency              ,
        BaudRate      : UartBaudRate,
    ) (
        i_clk          ,
        i_rst          ,
        o_tx           ,
        if_din: if_uart_tx,
    );

    inst uart_rx: UartRx #(
        ClockFrequency              ,
        BaudRate      : UartBaudRate,
        RxSyncStages  : 2           ,
    ) (
        i_clk          ,
        i_rst          ,
        if_dout: if_uart_rx,
        i_rx           ,
        o_overrun: uart_rx_overrun,
    );

    // GPIO
    inst if_gpout_read : Decoupled #(Width: 8,);
    inst if_gpout_write: Decoupled #(Width: 8,);

    inst gpout: GeneralPurposeOutput (
        i_clk                  ,
        i_rst                  ,
        if_din : if_gpout_write,
        if_dout: if_gpout_read ,
        o_gpout                ,
    );

    // デバイス選択
    let is_in_instr   : logic<1> = if_dout.ready;
    let is_out_instr  : logic<1> = if_din.valid;
    let is_inout_instr: logic<1> = is_in_instr | is_out_instr;
    let is_uart       : logic<1> = is_inout_instr & (i_dev_id == 32'h0000);
    let is_gpout      : logic<1> = is_inout_instr & (i_dev_id == 32'h0004);

    // デバイス間接続
    assign if_uart_tx.valid = is_uart & if_din.valid;
    assign if_uart_tx.bits  = if_din.bits[7:0];
    assign if_uart_rx.ready = is_uart & if_dout.ready;

    assign if_gpout_write.valid = is_gpout & if_din.valid;
    assign if_gpout_write.bits  = if_din.bits[7:0];
    assign if_gpout_read.ready  = is_gpout & if_dout.ready;

    always_comb {
        if is_uart {
            if_din.ready  = is_out_instr & if_uart_tx.ready;
            if_dout.valid = is_in_instr & if_uart_rx.valid;
            if_dout.bits  = {24'b0, if_uart_rx.bits};
        } else if is_gpout {
            if_din.ready  = is_out_instr & if_gpout_write.ready;
            if_dout.valid = is_in_instr & if_gpout_read.valid;
            if_dout.bits  = {24'b0, if_gpout_read.bits};
        } else {
            if_din.ready  = 0;
            if_dout.valid = 0;
            if_dout.bits  = 0;
        }
    }
}
