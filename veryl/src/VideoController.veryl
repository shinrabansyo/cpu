package Video {
    struct VesaDmtConfig {
        H_TOTAL      : u32,
        H_SYNC       : u32,
        H_BACK_PORCH : u32,
        H_LBORDER    : u32,
        H_ACTIVE     : u32,
        H_RBORDER    : u32,
        H_FRONT_PORCH: u32,

        V_TOTAL        : u32,
        V_SYNC         : u32,
        V_BACK_PORCH   : u32,
        V_TOP_BORDER   : u32,
        V_ACTIVE       : u32,
        V_BOTTOM_BORDER: u32,
        V_FRONT_PORCH  : u32,
    }

    function Dmt1280x720At60Hz -> VesaDmtConfig {
        var dmt_1280x720_at_60hz              : VesaDmtConfig;
        dmt_1280x720_at_60hz.H_TOTAL       = 1650;
        dmt_1280x720_at_60hz.H_SYNC        = 40;
        dmt_1280x720_at_60hz.H_BACK_PORCH  = 220;
        dmt_1280x720_at_60hz.H_LBORDER     = 0;
        dmt_1280x720_at_60hz.H_ACTIVE      = 1280;
        dmt_1280x720_at_60hz.H_RBORDER     = 0;
        dmt_1280x720_at_60hz.H_FRONT_PORCH = 110;

        dmt_1280x720_at_60hz.V_TOTAL         = 750;
        dmt_1280x720_at_60hz.V_SYNC          = 5;
        dmt_1280x720_at_60hz.V_BACK_PORCH    = 20;
        dmt_1280x720_at_60hz.V_TOP_BORDER    = 0;
        dmt_1280x720_at_60hz.V_ACTIVE        = 720;
        dmt_1280x720_at_60hz.V_BOTTOM_BORDER = 0;
        dmt_1280x720_at_60hz.V_FRONT_PORCH   = 5;
        return dmt_1280x720_at_60hz;
    }
}

module VideoControllerColTable #(
    param WIDTH             : u32                  = 128                                  ,
    param HEIGHT            : u32                  = 128                                  ,
    param NUM_TABLE         : u32                  = 16                                   ,
    param TABLE_BITS        : u32                  = $clog2(NUM_TABLE)                    ,
    param CONFIG            : Video::VesaDmtConfig = Video::Dmt1280x720At60Hz()           ,
    param NUM_PIXELS        : u32                  = CONFIG.H_ACTIVE * CONFIG.V_ACTIVE    ,
    param PIXEL_ADR_BITS    : u32                  = $clog2(NUM_PIXELS)                   ,
    param VRAM_ADDRESS_WIDTH: u32                  = $clog2((WIDTH * HEIGHT + 1) >> 1) + 1,
) (
    i_clk: input clock,
    i_rst: input reset,

    if_col_table_din: modport Decoupled::receiver,

    if_vdata_in: modport Decoupled::receiver,
    // if_vdata_out: modport Decoupled::sender                      ,
    i_vdata_adr: input logic<VRAM_ADDRESS_WIDTH - 1>,


    // o_clr : output logic                        ,
    // o_mea : output logic                        ,
    // o_wea : output logic                        ,
    // o_adra: output logic<$clog2(WIDTH * HEIGHT)>,
    // o_da  : output logic<TABLE_BITS>            ,
    // o_meb : output logic                        ,
    // o_adrb: output logic<$clog2(WIDTH * HEIGHT)>,
    // i_qb  : input  logic<TABLE_BITS>            ,

    i_clk_dvi: input  'dvi clock    ,
    i_rst_dvi: input  'dvi reset    ,
    o_vsync  : output 'dvi logic<1> ,
    o_hsync  : output 'dvi logic<1> ,
    o_de     : output 'dvi logic<1> ,
    o_data   : output 'dvi logic<24>,

) {
    // CPU -> (this module)
    // カラーテーブルの設定
    var r_col_table          : logic<24>                [NUM_TABLE];
    let w_col_table_din_adr  : logic<$clog2(NUM_TABLE)>             = if_col_table_din.bits[24+:$clog2(NUM_TABLE)];
    let w_col_table_din_color: logic<24>                            = if_col_table_din.bits[0+:24];

    var r_col_table_din_set_ready: logic;
    assign if_col_table_din.ready    = r_col_table_din_set_ready;

    always_ff (i_clk, i_rst) {
        if_reset {
            r_col_table[0] = 24'h0000FF;
            r_col_table[1] = 24'h00FF00;
            r_col_table[2] = 24'hFF0000;
            for table_id: u32 in 3..NUM_TABLE {
                r_col_table[table_id] = 24'h000000;
            }
            r_col_table_din_set_ready = 1'b0;
        } else {
            if if_col_table_din.valid {
                r_col_table[w_col_table_din_adr] = w_col_table_din_color;
            }

            if if_col_table_din.valid && !r_col_table_din_set_ready {
                r_col_table_din_set_ready = 1'b1;
            } else {
                r_col_table_din_set_ready = 1'b0;
            }
        }
    }

    // VRAM -> (this module) -> CPU
    // VRAM 読み出し
    // var r_vram_read_valid: logic   ;
    // var w_vram_read_data : logic<8>;

    inst vram_sync: VramSync #(
        OUT_MODE: 2     ,
        WIDTH   : WIDTH ,
        HEIGHT  : HEIGHT,
    ) (
        i_clk : i_clk                                ,
        i_rst : i_rst                                ,
        i_clr : 0                                    ,
        i_mea : if_vdata_in.valid                    ,
        i_wea : if_vdata_in.valid                    ,
        i_adra: i_vdata_adr[VRAM_ADDRESS_WIDTH - 2:0],
        i_da  : if_vdata_in.bits[7:0]                ,
        // i_meb      : 1                    ,
        // i_adrb     : i_vdata_adr          ,
        // o_qb       : w_vram_read_data     ,
        i_clk_video: i_clk_dvi                           ,
        i_rst_video: i_rst_dvi                           ,
        i_mev      : 1                                   ,
        i_adrv     : w_draw_adr[VRAM_ADDRESS_WIDTH - 2:0],
        o_qv       : w_draw_data                         ,
    );

    // if_vdata_out に信号が入力されてから valid が立つまで 1 クロック
    // i_vdata_adr  に信号が入力されてから o_qb にデータが出るまで 1 クロック
    // -> valid が立つタイミングと有効なデータが出るタイミングは一致
    // assign if_vdata_out.bits = w_vram_read_data as 32;

    // always_ff (i_clk, i_rst) {
    //     if_reset {
    //         r_vram_read_valid = 1'b0;
    //     } else {
    //         if if_vdata_out.ready && !r_vram_read_valid {
    //             r_vram_read_valid = 1'b1;
    //         } else {
    //             r_vram_read_valid = 1'b0;
    //         }
    //     }
    // }

    // CPU -> (this module) -> VRAM
    // VRAM 書き込み
    var r_vram_write_ready: logic;
    assign if_vdata_in.ready  = r_vram_write_ready;

    always_ff (i_clk, i_rst) {
        if_reset {
            r_vram_write_ready = 1'b0;
        } else {
            if if_vdata_in.valid && !r_vram_write_ready {
                r_vram_write_ready = 1'b1;
            } else {
                r_vram_write_ready = 1'b0;
            }
        }
    }



    // VRAM -> (this module) -> GOWIN DVI TX IP
    var r_vsync: 'dvi logic<1> ;
    var r_hsync: 'dvi logic<1> ;
    var r_de   : 'dvi logic<1> ;
    var r_data : 'dvi logic<24>;

    let w_pre_pre_pixel_counter: 'dvi logic<$clog2(CONFIG.H_TOTAL)> = if r_pixel_counter as 32 + 1 == CONFIG.H_TOTAL - 1 ?
        0
    : if r_pixel_counter as 32 == CONFIG.H_TOTAL - 1 ?
        1
    :
        r_pixel_counter + 2
    ;
    let w_pre_pixel_counter: 'dvi logic<$clog2(CONFIG.H_TOTAL)> = if r_pixel_counter as 32 == CONFIG.H_TOTAL - 1 ? 0 : r_pixel_counter + 1;
    var r_pixel_counter    : 'dvi logic<$clog2(CONFIG.H_TOTAL)>;
    var r_line_counter     : 'dvi logic<$clog2(CONFIG.V_TOTAL)>;

    var r_red  : 'dvi logic<8>;
    var r_green: 'dvi logic<8>;
    var r_blue : 'dvi logic<8>;
    assign o_data  = {r_red, r_green, r_blue};

    // let w_pixel_adr_flatten : `dvi logic<$clog2(CONFIG.H_ACTIVE * CONFIG.V_ACTIVE)> = YPos(r_line_counter) * CONFIG.H_ACTIVE + XPos(r_pixel_counter);
    let w_inv_zoom                 : 'dvi logic<VRAM_ADDRESS_WIDTH + 1> = InvZoom(XPos(w_pre_pixel_counter), YPos(r_line_counter));
    let w_inv_zoom_reading         : 'dvi logic<VRAM_ADDRESS_WIDTH + 1> = InvZoom(XPos(w_pre_pre_pixel_counter), YPos(r_line_counter));
    let w_pixel_adr_flatten_reading: 'dvi logic<VRAM_ADDRESS_WIDTH>     = w_inv_zoom_reading[VRAM_ADDRESS_WIDTH - 1:0];
    let w_pixel_adr_flatten        : 'dvi logic<VRAM_ADDRESS_WIDTH>     = w_inv_zoom[VRAM_ADDRESS_WIDTH - 1:0];
    let w_draw_adr                 : 'dvi logic<VRAM_ADDRESS_WIDTH>     = w_pixel_adr_flatten_reading >> 1;
    var w_draw_data                : 'dvi logic<8>                     ;
    let w_draw_col_table_adr       : 'dvi logic<TABLE_BITS>             = if w_pixel_adr_flatten[0] ? (w_draw_data >> 4) as TABLE_BITS : w_draw_data as TABLE_BITS; // pixel の番地が奇数のとき、上位 4bit を使う

    // (x, y) = (3, 0) pixel を指していた場合
    // vram上では vram[1] の上位 4bit が (3, 0) に対応
    // xxxx ????

    const H_LBORDER_START     : u32 = CONFIG.H_SYNC + CONFIG.H_BACK_PORCH;
    const H_ACTIVE_VIDEO_START: u32 = H_LBORDER_START + CONFIG.H_LBORDER;
    const H_RBORDER_START     : u32 = H_ACTIVE_VIDEO_START + CONFIG.H_ACTIVE;
    const H_FRONT_PORCH_START : u32 = H_RBORDER_START + CONFIG.H_RBORDER;

    const V_TOP_BORDER_START   : u32 = CONFIG.V_SYNC + CONFIG.V_BACK_PORCH;
    const V_ACTIVE_VIDEO_START : u32 = V_TOP_BORDER_START + CONFIG.V_TOP_BORDER;
    const V_BOTTOM_BORDER_START: u32 = V_ACTIVE_VIDEO_START + CONFIG.V_ACTIVE;
    const V_FRONT_PORCH_START  : u32 = V_BOTTOM_BORDER_START + CONFIG.V_BOTTOM_BORDER;

    // const H_MAX_ZOOM: u32 = 1280 / WIDTH;
    // const V_MAX_ZOOM: u32 = 720  / HEIGHT;
    // const ZOOM_RATIO: u32 = if (H_MAX_ZOOM < V_MAX_ZOOM) { H_MAX_ZOOM } else { V_MAX_ZOOM };
    // var r_hzoom_counter: `dvi logic<$clog2(ZOOM_RATIO+1)>;
    // var r_vzoom_counter: `dvi logic<$clog2(ZOOM_RATIO+1)>;

    // WIDTH x HEIGHT のVRAM領域のオフセット(原点：左上)
    const OFFSET_X: u32 = 384;
    const OFFSET_Y: u32 = 104;

    function IsActiveRegion (
        i_pixel_counter: input logic<$clog2(CONFIG.H_TOTAL)>,
        i_line_counter : input logic<$clog2(CONFIG.V_TOTAL)>,
    ) -> logic {
        return (H_ACTIVE_VIDEO_START <= i_pixel_counter as 32 & i_pixel_counter as 32 <: H_RBORDER_START & V_ACTIVE_VIDEO_START <= i_line_counter as 32 & i_line_counter as 32 <: V_BOTTOM_BORDER_START);
    }

    function XPos (
        i_pixel_counter: input logic<$clog2(CONFIG.H_TOTAL)>,
    ) -> u32 {
        return i_pixel_counter as 32 - H_ACTIVE_VIDEO_START - OFFSET_X;
    }

    function YPos (
        i_line_counter: input logic<$clog2(CONFIG.V_TOTAL)>,
    ) -> u32 {
        return i_line_counter as 32 - V_ACTIVE_VIDEO_START - OFFSET_Y;
    }

    function InvZoom (
        i_x: input logic<32>,
        i_y: input logic<32>,
    ) -> logic<VRAM_ADDRESS_WIDTH + 1> {

        let w_x    : logic<32> = i_x >> 2;
        let w_y    : logic<32> = i_y >> 2;
        let w_valid: logic     = (w_x <: WIDTH) && (w_y <: HEIGHT);

        return {w_valid, (w_y * WIDTH + w_x) as VRAM_ADDRESS_WIDTH};
    }

    var w_draw_red  : 'dvi logic<8>;
    var w_draw_green: 'dvi logic<8>;
    var w_draw_blue : 'dvi logic<8>;

    unsafe (cdc) {
        assign {w_draw_red, w_draw_green, w_draw_blue} = r_col_table[w_draw_col_table_adr];
    }

    // 1 pixel per clock
    always_ff (i_clk_dvi, i_rst_dvi) {
        if_reset {
            r_pixel_counter = 0;
            r_line_counter  = 0;
            o_vsync         = 1'b0;
            o_hsync         = 1'b0;
            o_de            = 1'b0;
            r_red           = 8'b0;
            r_green         = 8'b0;
            r_blue          = 8'b0;
            r_vsync         = 1'b0;
            r_hsync         = 1'b0;
            r_de            = 1'b0;
            r_data          = 24'b0;
        } else {
            // o_vsync = r_vsync;
            // o_hsync = r_hsync;
            // o_de    = r_de;

            // ほんとは as $bits(r_pixel_counter) を使いたいが、現状使えないので u32 に揃える
            if (r_pixel_counter as 32 == CONFIG.H_TOTAL - 1) {
                r_pixel_counter = 0;
            } else {
                r_pixel_counter += 1;
            }
            if (w_pre_pixel_counter as 32 == CONFIG.H_TOTAL - 1) {
                if (r_line_counter as 32 == CONFIG.V_TOTAL - 1) {
                    r_line_counter = 0;
                } else {
                    r_line_counter += 1;
                }
            }
            o_hsync = (r_pixel_counter as 32 <: CONFIG.H_SYNC);
            o_vsync = (r_line_counter as 32 <: CONFIG.V_SYNC);
            o_de    = IsActiveRegion(r_pixel_counter, r_line_counter);

            if (IsActiveRegion(r_pixel_counter, r_line_counter) && w_inv_zoom[msb]) {
                r_red   = w_draw_red;
                r_green = w_draw_green;
                r_blue  = w_draw_blue;
            } else {
                r_red   = 8'h00;
                r_green = 8'h00;
                r_blue  = 8'h00;
            }
        }
    }
}
