circuit Core :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip command : UInt<8>, flip a : UInt<32>, flip b : UInt<32>, zero : UInt<1>, out : UInt<32>}

    node _io_zero_T = eq(io.out, UInt<32>("h0")) @[Alu.scala 17:22]
    io.zero <= _io_zero_T @[Alu.scala 17:11]
    node _io_out_T = eq(io.command, UInt<8>("h1")) @[Alu.scala 20:17]
    node _io_out_T_1 = add(io.a, io.b) @[Alu.scala 20:40]
    node _io_out_T_2 = tail(_io_out_T_1, 1) @[Alu.scala 20:40]
    node _io_out_T_3 = eq(io.command, UInt<8>("h2")) @[Alu.scala 21:17]
    node _io_out_T_4 = sub(io.a, io.b) @[Alu.scala 21:40]
    node _io_out_T_5 = tail(_io_out_T_4, 1) @[Alu.scala 21:40]
    node _io_out_T_6 = mux(_io_out_T_3, _io_out_T_5, UInt<32>("h0")) @[Mux.scala 101:16]
    node _io_out_T_7 = mux(_io_out_T, _io_out_T_2, _io_out_T_6) @[Mux.scala 101:16]
    io.out <= _io_out_T_7 @[Alu.scala 19:10]

  module UartTx :
    input clock : Clock
    input reset : Reset
    output io : { tx : UInt<1>, flip din : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}}

    reg rateCounter : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[Uart.scala 26:28]
    reg bitCounter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 27:28]
    reg bits : UInt<1>[10], clock with :
      reset => (UInt<1>("h0"), bits) @[Uart.scala 28:24]
    node _io_tx_T = eq(bitCounter, UInt<1>("h0")) @[Uart.scala 30:23]
    node _io_tx_T_1 = or(_io_tx_T, bits[0]) @[Uart.scala 30:31]
    io.tx <= _io_tx_T_1 @[Uart.scala 30:9]
    node ready = eq(bitCounter, UInt<1>("h0")) @[Uart.scala 31:26]
    io.din.ready <= ready @[Uart.scala 32:16]
    node _T = and(ready, io.din.valid) @[Uart.scala 38:14]
    when _T : @[Uart.scala 38:31]
      node hi = cat(UInt<1>("h1"), io.din.bits) @[Cat.scala 33:92]
      node _T_1 = cat(hi, UInt<1>("h0")) @[Cat.scala 33:92]
      node _T_2 = bits(_T_1, 0, 0) @[Uart.scala 39:40]
      node _T_3 = bits(_T_1, 1, 1) @[Uart.scala 39:40]
      node _T_4 = bits(_T_1, 2, 2) @[Uart.scala 39:40]
      node _T_5 = bits(_T_1, 3, 3) @[Uart.scala 39:40]
      node _T_6 = bits(_T_1, 4, 4) @[Uart.scala 39:40]
      node _T_7 = bits(_T_1, 5, 5) @[Uart.scala 39:40]
      node _T_8 = bits(_T_1, 6, 6) @[Uart.scala 39:40]
      node _T_9 = bits(_T_1, 7, 7) @[Uart.scala 39:40]
      node _T_10 = bits(_T_1, 8, 8) @[Uart.scala 39:40]
      node _T_11 = bits(_T_1, 9, 9) @[Uart.scala 39:40]
      bits[0] <= _T_2 @[Uart.scala 39:10]
      bits[1] <= _T_3 @[Uart.scala 39:10]
      bits[2] <= _T_4 @[Uart.scala 39:10]
      bits[3] <= _T_5 @[Uart.scala 39:10]
      bits[4] <= _T_6 @[Uart.scala 39:10]
      bits[5] <= _T_7 @[Uart.scala 39:10]
      bits[6] <= _T_8 @[Uart.scala 39:10]
      bits[7] <= _T_9 @[Uart.scala 39:10]
      bits[8] <= _T_10 @[Uart.scala 39:10]
      bits[9] <= _T_11 @[Uart.scala 39:10]
      bitCounter <= UInt<4>("ha") @[Uart.scala 40:16]
      rateCounter <= UInt<12>("h83c") @[Uart.scala 41:17]
    node _T_12 = gt(bitCounter, UInt<1>("h0")) @[Uart.scala 43:20]
    when _T_12 : @[Uart.scala 43:28]
      node _T_13 = eq(rateCounter, UInt<1>("h0")) @[Uart.scala 44:22]
      when _T_13 : @[Uart.scala 44:31]
        bits[0] <= bits[1] @[Uart.scala 47:37]
        bits[1] <= bits[2] @[Uart.scala 47:37]
        bits[2] <= bits[3] @[Uart.scala 47:37]
        bits[3] <= bits[4] @[Uart.scala 47:37]
        bits[4] <= bits[5] @[Uart.scala 47:37]
        bits[5] <= bits[6] @[Uart.scala 47:37]
        bits[6] <= bits[7] @[Uart.scala 47:37]
        bits[7] <= bits[8] @[Uart.scala 47:37]
        bits[8] <= bits[9] @[Uart.scala 47:37]
        node _bitCounter_T = sub(bitCounter, UInt<1>("h1")) @[Uart.scala 48:32]
        node _bitCounter_T_1 = tail(_bitCounter_T, 1) @[Uart.scala 48:32]
        bitCounter <= _bitCounter_T_1 @[Uart.scala 48:18]
        rateCounter <= UInt<12>("h83c") @[Uart.scala 49:19]
      else :
        node _rateCounter_T = sub(rateCounter, UInt<1>("h1")) @[Uart.scala 51:34]
        node _rateCounter_T_1 = tail(_rateCounter_T, 1) @[Uart.scala 51:34]
        rateCounter <= _rateCounter_T_1 @[Uart.scala 51:19]


  module UartRx :
    input clock : Clock
    input reset : Reset
    output io : { dout : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, flip rx : UInt<1>, overrun : UInt<1>}

    reg rateCounter : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[Uart.scala 63:28]
    reg bitCounter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 65:27]
    reg bits : UInt<1>[10], clock with :
      reset => (UInt<1>("h0"), bits) @[Uart.scala 66:17]
    wire _rxRegs_WIRE : UInt<1>[3] @[Uart.scala 68:31]
    _rxRegs_WIRE[0] <= UInt<1>("h0") @[Uart.scala 68:31]
    _rxRegs_WIRE[1] <= UInt<1>("h0") @[Uart.scala 68:31]
    _rxRegs_WIRE[2] <= UInt<1>("h0") @[Uart.scala 68:31]
    reg rxRegs : UInt<1>[3], clock with :
      reset => (reset, _rxRegs_WIRE) @[Uart.scala 68:23]
    reg overrun : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 72:24]
    reg running : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 73:24]
    reg outValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 76:25]
    reg outBits : UInt<8>, clock with :
      reset => (UInt<1>("h0"), outBits) @[Uart.scala 77:20]
    wire outReady : UInt<1> @[Uart.scala 78:29]
    outReady <= io.dout.ready @[Uart.scala 78:29]
    io.dout.valid <= outValid @[Uart.scala 79:17]
    io.dout.bits <= outBits @[Uart.scala 80:16]
    node _T = and(outValid, outReady) @[Uart.scala 83:17]
    when _T : @[Uart.scala 83:30]
      outValid <= UInt<1>("h0") @[Uart.scala 84:14]
    rxRegs[2] <= io.rx @[Uart.scala 97:24]
    rxRegs[0] <= rxRegs[1] @[Uart.scala 98:50]
    rxRegs[1] <= rxRegs[2] @[Uart.scala 98:50]
    io.overrun <= overrun @[Uart.scala 104:14]
    node _T_1 = eq(running, UInt<1>("h0")) @[Uart.scala 107:8]
    when _T_1 : @[Uart.scala 107:18]
      node _T_2 = eq(rxRegs[1], UInt<1>("h0")) @[Uart.scala 108:10]
      node _T_3 = and(_T_2, rxRegs[0]) @[Uart.scala 108:21]
      when _T_3 : @[Uart.scala 108:35]
        rateCounter <= UInt<12>("hc5a") @[Uart.scala 110:19]
        bitCounter <= UInt<4>("h9") @[Uart.scala 111:18]
        running <= UInt<1>("h1") @[Uart.scala 112:15]
    else :
      node _T_4 = eq(rateCounter, UInt<1>("h0")) @[Uart.scala 115:22]
      when _T_4 : @[Uart.scala 115:31]
        bits[9] <= rxRegs[0] @[Uart.scala 116:22]
        bits[0] <= bits[1] @[Uart.scala 117:45]
        bits[1] <= bits[2] @[Uart.scala 117:45]
        bits[2] <= bits[3] @[Uart.scala 117:45]
        bits[3] <= bits[4] @[Uart.scala 117:45]
        bits[4] <= bits[5] @[Uart.scala 117:45]
        bits[5] <= bits[6] @[Uart.scala 117:45]
        bits[6] <= bits[7] @[Uart.scala 117:45]
        bits[7] <= bits[8] @[Uart.scala 117:45]
        bits[8] <= bits[9] @[Uart.scala 117:45]
        node _T_5 = eq(bitCounter, UInt<1>("h0")) @[Uart.scala 119:23]
        when _T_5 : @[Uart.scala 119:32]
          outValid <= UInt<1>("h1") @[Uart.scala 120:18]
          node outBits_lo_lo = cat(bits[2], bits[1]) @[Cat.scala 33:92]
          node outBits_lo_hi = cat(bits[4], bits[3]) @[Cat.scala 33:92]
          node outBits_lo = cat(outBits_lo_hi, outBits_lo_lo) @[Cat.scala 33:92]
          node outBits_hi_lo = cat(bits[6], bits[5]) @[Cat.scala 33:92]
          node outBits_hi_hi = cat(bits[8], bits[7]) @[Cat.scala 33:92]
          node outBits_hi = cat(outBits_hi_hi, outBits_hi_lo) @[Cat.scala 33:92]
          node _outBits_T = cat(outBits_hi, outBits_lo) @[Cat.scala 33:92]
          outBits <= _outBits_T @[Uart.scala 121:17]
          overrun <= outValid @[Uart.scala 122:17]
          running <= UInt<1>("h0") @[Uart.scala 126:17]
        else :
          rateCounter <= UInt<12>("h83c") @[Uart.scala 128:21]
          node _bitCounter_T = sub(bitCounter, UInt<1>("h1")) @[Uart.scala 129:34]
          node _bitCounter_T_1 = tail(_bitCounter_T, 1) @[Uart.scala 129:34]
          bitCounter <= _bitCounter_T_1 @[Uart.scala 129:20]
      else :
        node _rateCounter_T = sub(rateCounter, UInt<1>("h1")) @[Uart.scala 132:34]
        node _rateCounter_T_1 = tail(_rateCounter_T, 1) @[Uart.scala 132:34]
        rateCounter <= _rateCounter_T_1 @[Uart.scala 132:19]


  module IOBus :
    input clock : Clock
    input reset : Reset
    output io : { flip devId : UInt<32>, din : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, flip dout : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, tx : UInt<1>, flip rx : UInt<1>}

    inst uartTx of UartTx @[IOBus.scala 16:22]
    uartTx.clock <= clock
    uartTx.reset <= reset
    inst uartRx of UartRx @[IOBus.scala 17:22]
    uartRx.clock <= clock
    uartRx.reset <= reset
    wire isUart : UInt<1> @[IOBus.scala 19:20]
    node _isUart_T = eq(io.devId, UInt<1>("h0")) @[IOBus.scala 21:23]
    isUart <= _isUart_T @[IOBus.scala 21:10]
    uartRx.io.rx <= io.rx @[IOBus.scala 24:16]
    node _io_din_valid_T = mux(isUart, uartRx.io.dout.valid, UInt<1>("h1")) @[Mux.scala 101:16]
    io.din.valid <= _io_din_valid_T @[IOBus.scala 26:16]
    node _io_din_bits_T = mux(isUart, uartRx.io.dout.bits, UInt<1>("h0")) @[Mux.scala 101:16]
    io.din.bits <= _io_din_bits_T @[IOBus.scala 29:15]
    uartRx.io.dout.ready <= UInt<1>("h0") @[IOBus.scala 34:24]
    when isUart : @[IOBus.scala 35:17]
      uartRx.io.dout.ready <= io.din.ready @[IOBus.scala 36:26]
    io.tx <= uartTx.io.tx @[IOBus.scala 42:9]
    uartTx.io.din.valid <= UInt<1>("h0") @[IOBus.scala 44:23]
    uartTx.io.din.bits <= UInt<1>("h0") @[IOBus.scala 45:22]
    when isUart : @[IOBus.scala 46:17]
      uartTx.io.din.valid <= io.dout.valid @[IOBus.scala 47:25]
      uartTx.io.din.bits <= io.dout.bits @[IOBus.scala 48:24]
    node _io_dout_ready_T = mux(isUart, uartTx.io.din.ready, UInt<1>("h1")) @[Mux.scala 101:16]
    io.dout.ready <= _io_dout_ready_T @[IOBus.scala 51:17]

  module Core :
    input clock : Clock
    input reset : UInt<1>
    output io : { tx : UInt<1>, flip rx : UInt<1>, led : UInt<6>}

    inst alu of Alu @[Core.scala 14:19]
    alu.clock <= clock
    alu.reset <= reset
    inst ioBus of IOBus @[Core.scala 15:21]
    ioBus.clock <= clock
    ioBus.reset <= reset
    ioBus.io.rx <= io.rx @[Core.scala 17:15]
    io.tx <= ioBus.io.tx @[Core.scala 18:9]
    smem imem : UInt<8> [6144] @[Core.scala 20:32]
    smem dmem : UInt<8> [4096] @[Core.scala 22:32]
    reg first_time : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Core.scala 25:31]
    reg pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 26:31]
    reg pc_next_plus_6 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 27:31]
    wire pc_next : UInt<32> @[Core.scala 28:28]
    cmem regfile : UInt<32> [32] @[Core.scala 29:27]
    wire instr : UInt<48> @[Core.scala 31:28]
    wire opcode : UInt<5> @[Core.scala 32:28]
    wire opcode_sub : UInt<3> @[Core.scala 33:28]
    wire rd : UInt<5> @[Core.scala 34:28]
    wire rs1 : UInt<5> @[Core.scala 35:28]
    wire rs1_i : UInt<5> @[Core.scala 36:28]
    wire rs1_s : UInt<5> @[Core.scala 37:28]
    wire rs2 : UInt<5> @[Core.scala 38:28]
    wire rs2_s : UInt<5> @[Core.scala 39:28]
    wire imm : UInt<32> @[Core.scala 40:28]
    wire imm_r : UInt<25> @[Core.scala 41:28]
    wire imm_r_sext : UInt<32> @[Core.scala 42:28]
    wire dmem_raw : UInt<32> @[Core.scala 44:28]
    reg load_ready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 45:31]
    pc <= pc_next @[Core.scala 48:6]
    node _instr_T = add(pc_next, UInt<1>("h0")) @[Core.scala 49:76]
    node _instr_T_1 = tail(_instr_T, 1) @[Core.scala 49:76]
    wire _instr_WIRE : UInt @[Core.scala 49:67]
    _instr_WIRE is invalid @[Core.scala 49:67]
    when UInt<1>("h1") : @[Core.scala 49:67]
      _instr_WIRE <= _instr_T_1 @[Core.scala 49:67]
      node _instr_T_2 = or(_instr_WIRE, UInt<13>("h0")) @[Core.scala 49:67]
      node _instr_T_3 = bits(_instr_T_2, 12, 0) @[Core.scala 49:67]
      read mport instr_MPORT = imem[_instr_T_3], clock @[Core.scala 49:67]
    node _instr_T_4 = add(pc_next, UInt<1>("h1")) @[Core.scala 49:76]
    node _instr_T_5 = tail(_instr_T_4, 1) @[Core.scala 49:76]
    wire _instr_WIRE_1 : UInt @[Core.scala 49:67]
    _instr_WIRE_1 is invalid @[Core.scala 49:67]
    when UInt<1>("h1") : @[Core.scala 49:67]
      _instr_WIRE_1 <= _instr_T_5 @[Core.scala 49:67]
      node _instr_T_6 = or(_instr_WIRE_1, UInt<13>("h0")) @[Core.scala 49:67]
      node _instr_T_7 = bits(_instr_T_6, 12, 0) @[Core.scala 49:67]
      read mport instr_MPORT_1 = imem[_instr_T_7], clock @[Core.scala 49:67]
    node _instr_T_8 = add(pc_next, UInt<2>("h2")) @[Core.scala 49:76]
    node _instr_T_9 = tail(_instr_T_8, 1) @[Core.scala 49:76]
    wire _instr_WIRE_2 : UInt @[Core.scala 49:67]
    _instr_WIRE_2 is invalid @[Core.scala 49:67]
    when UInt<1>("h1") : @[Core.scala 49:67]
      _instr_WIRE_2 <= _instr_T_9 @[Core.scala 49:67]
      node _instr_T_10 = or(_instr_WIRE_2, UInt<13>("h0")) @[Core.scala 49:67]
      node _instr_T_11 = bits(_instr_T_10, 12, 0) @[Core.scala 49:67]
      read mport instr_MPORT_2 = imem[_instr_T_11], clock @[Core.scala 49:67]
    node _instr_T_12 = add(pc_next, UInt<2>("h3")) @[Core.scala 49:76]
    node _instr_T_13 = tail(_instr_T_12, 1) @[Core.scala 49:76]
    wire _instr_WIRE_3 : UInt @[Core.scala 49:67]
    _instr_WIRE_3 is invalid @[Core.scala 49:67]
    when UInt<1>("h1") : @[Core.scala 49:67]
      _instr_WIRE_3 <= _instr_T_13 @[Core.scala 49:67]
      node _instr_T_14 = or(_instr_WIRE_3, UInt<13>("h0")) @[Core.scala 49:67]
      node _instr_T_15 = bits(_instr_T_14, 12, 0) @[Core.scala 49:67]
      read mport instr_MPORT_3 = imem[_instr_T_15], clock @[Core.scala 49:67]
    node _instr_T_16 = add(pc_next, UInt<3>("h4")) @[Core.scala 49:76]
    node _instr_T_17 = tail(_instr_T_16, 1) @[Core.scala 49:76]
    wire _instr_WIRE_4 : UInt @[Core.scala 49:67]
    _instr_WIRE_4 is invalid @[Core.scala 49:67]
    when UInt<1>("h1") : @[Core.scala 49:67]
      _instr_WIRE_4 <= _instr_T_17 @[Core.scala 49:67]
      node _instr_T_18 = or(_instr_WIRE_4, UInt<13>("h0")) @[Core.scala 49:67]
      node _instr_T_19 = bits(_instr_T_18, 12, 0) @[Core.scala 49:67]
      read mport instr_MPORT_4 = imem[_instr_T_19], clock @[Core.scala 49:67]
    node _instr_T_20 = add(pc_next, UInt<3>("h5")) @[Core.scala 49:76]
    node _instr_T_21 = tail(_instr_T_20, 1) @[Core.scala 49:76]
    wire _instr_WIRE_5 : UInt @[Core.scala 49:67]
    _instr_WIRE_5 is invalid @[Core.scala 49:67]
    when UInt<1>("h1") : @[Core.scala 49:67]
      _instr_WIRE_5 <= _instr_T_21 @[Core.scala 49:67]
      node _instr_T_22 = or(_instr_WIRE_5, UInt<13>("h0")) @[Core.scala 49:67]
      node _instr_T_23 = bits(_instr_T_22, 12, 0) @[Core.scala 49:67]
      read mport instr_MPORT_5 = imem[_instr_T_23], clock @[Core.scala 49:67]
    node instr_lo_hi = cat(instr_MPORT_2, instr_MPORT_1) @[Cat.scala 33:92]
    node instr_lo = cat(instr_lo_hi, instr_MPORT) @[Cat.scala 33:92]
    node instr_hi_hi = cat(instr_MPORT_5, instr_MPORT_4) @[Cat.scala 33:92]
    node instr_hi = cat(instr_hi_hi, instr_MPORT_3) @[Cat.scala 33:92]
    node _instr_T_24 = cat(instr_hi, instr_lo) @[Cat.scala 33:92]
    node _instr_T_25 = mux(first_time, UInt<1>("h0"), _instr_T_24) @[Core.scala 49:15]
    instr <= _instr_T_25 @[Core.scala 49:9]
    first_time <= UInt<1>("h0") @[Core.scala 50:14]
    node _pc_next_plus_6_T = add(pc_next, UInt<3>("h6")) @[Core.scala 52:29]
    node _pc_next_plus_6_T_1 = tail(_pc_next_plus_6_T, 1) @[Core.scala 52:29]
    pc_next_plus_6 <= _pc_next_plus_6_T_1 @[Core.scala 52:18]
    node _pc_next_T = eq(opcode, UInt<5>("h3")) @[Core.scala 57:13]
    node _pc_next_T_1 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 57:40]
    node _pc_next_T_2 = and(_pc_next_T, _pc_next_T_1) @[Core.scala 57:26]
    node _pc_next_T_3 = eq(alu.io.zero, UInt<1>("h1")) @[Core.scala 57:68]
    node _pc_next_T_4 = and(_pc_next_T_2, _pc_next_T_3) @[Core.scala 57:53]
    node _pc_next_T_5 = add(pc, imm_r_sext) @[Core.scala 57:88]
    node _pc_next_T_6 = tail(_pc_next_T_5, 1) @[Core.scala 57:88]
    node _pc_next_T_7 = eq(opcode, UInt<5>("h3")) @[Core.scala 58:13]
    node _pc_next_T_8 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 58:40]
    node _pc_next_T_9 = and(_pc_next_T_7, _pc_next_T_8) @[Core.scala 58:26]
    node _pc_next_T_10 = eq(alu.io.zero, UInt<1>("h0")) @[Core.scala 58:68]
    node _pc_next_T_11 = and(_pc_next_T_9, _pc_next_T_10) @[Core.scala 58:53]
    node _pc_next_T_12 = add(pc, imm_r_sext) @[Core.scala 58:88]
    node _pc_next_T_13 = tail(_pc_next_T_12, 1) @[Core.scala 58:88]
    node _pc_next_T_14 = eq(opcode, UInt<5>("h3")) @[Core.scala 59:13]
    node _pc_next_T_15 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 59:40]
    node _pc_next_T_16 = and(_pc_next_T_14, _pc_next_T_15) @[Core.scala 59:26]
    node _pc_next_T_17 = bits(alu.io.out, 31, 31) @[Core.scala 59:67]
    node _pc_next_T_18 = eq(_pc_next_T_17, UInt<1>("h1")) @[Core.scala 59:72]
    node _pc_next_T_19 = eq(alu.io.zero, UInt<1>("h1")) @[Core.scala 59:100]
    node _pc_next_T_20 = or(_pc_next_T_18, _pc_next_T_19) @[Core.scala 59:85]
    node _pc_next_T_21 = and(_pc_next_T_16, _pc_next_T_20) @[Core.scala 59:53]
    node _pc_next_T_22 = add(pc, imm_r_sext) @[Core.scala 59:120]
    node _pc_next_T_23 = tail(_pc_next_T_22, 1) @[Core.scala 59:120]
    node _pc_next_T_24 = eq(opcode, UInt<5>("h3")) @[Core.scala 60:13]
    node _pc_next_T_25 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 60:40]
    node _pc_next_T_26 = and(_pc_next_T_24, _pc_next_T_25) @[Core.scala 60:26]
    node _pc_next_T_27 = bits(alu.io.out, 31, 31) @[Core.scala 60:66]
    node _pc_next_T_28 = eq(_pc_next_T_27, UInt<1>("h1")) @[Core.scala 60:71]
    node _pc_next_T_29 = and(_pc_next_T_26, _pc_next_T_28) @[Core.scala 60:53]
    node _pc_next_T_30 = add(pc, imm_r_sext) @[Core.scala 60:93]
    node _pc_next_T_31 = tail(_pc_next_T_30, 1) @[Core.scala 60:93]
    node _pc_next_T_32 = eq(opcode, UInt<5>("h3")) @[Core.scala 61:13]
    node _pc_next_T_33 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 61:40]
    node _pc_next_T_34 = and(_pc_next_T_32, _pc_next_T_33) @[Core.scala 61:26]
    node _pc_next_T_35 = eq(opcode, UInt<5>("h4")) @[Core.scala 63:13]
    node _pc_next_T_36 = eq(load_ready, UInt<1>("h0")) @[Core.scala 63:29]
    node _pc_next_T_37 = and(_pc_next_T_35, _pc_next_T_36) @[Core.scala 63:26]
    node _pc_next_T_38 = eq(opcode, UInt<5>("h6")) @[Core.scala 65:13]
    node _pc_next_T_39 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 65:40]
    node _pc_next_T_40 = and(_pc_next_T_38, _pc_next_T_39) @[Core.scala 65:26]
    node _pc_next_T_41 = eq(ioBus.io.din.valid, UInt<1>("h0")) @[Core.scala 65:56]
    node _pc_next_T_42 = and(_pc_next_T_40, _pc_next_T_41) @[Core.scala 65:53]
    node _pc_next_T_43 = eq(opcode, UInt<5>("h6")) @[Core.scala 66:13]
    node _pc_next_T_44 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 66:40]
    node _pc_next_T_45 = and(_pc_next_T_43, _pc_next_T_44) @[Core.scala 66:26]
    node _pc_next_T_46 = eq(ioBus.io.dout.ready, UInt<1>("h0")) @[Core.scala 66:56]
    node _pc_next_T_47 = and(_pc_next_T_45, _pc_next_T_46) @[Core.scala 66:53]
    node _pc_next_T_48 = mux(_pc_next_T_47, pc, pc_next_plus_6) @[Mux.scala 101:16]
    node _pc_next_T_49 = mux(_pc_next_T_42, pc, _pc_next_T_48) @[Mux.scala 101:16]
    node _pc_next_T_50 = mux(_pc_next_T_37, pc, _pc_next_T_49) @[Mux.scala 101:16]
    node _pc_next_T_51 = mux(_pc_next_T_34, alu.io.out, _pc_next_T_50) @[Mux.scala 101:16]
    node _pc_next_T_52 = mux(_pc_next_T_29, _pc_next_T_31, _pc_next_T_51) @[Mux.scala 101:16]
    node _pc_next_T_53 = mux(_pc_next_T_21, _pc_next_T_23, _pc_next_T_52) @[Mux.scala 101:16]
    node _pc_next_T_54 = mux(_pc_next_T_11, _pc_next_T_13, _pc_next_T_53) @[Mux.scala 101:16]
    node _pc_next_T_55 = mux(_pc_next_T_4, _pc_next_T_6, _pc_next_T_54) @[Mux.scala 101:16]
    pc_next <= _pc_next_T_55 @[Core.scala 56:11]
    wire command : UInt<8> @[Core.scala 71:24]
    node _opcode_T = bits(instr, 4, 0) @[Core.scala 73:22]
    opcode <= _opcode_T @[Core.scala 73:14]
    node _opcode_sub_T = bits(instr, 7, 5) @[Core.scala 74:22]
    opcode_sub <= _opcode_sub_T @[Core.scala 74:14]
    node _rd_T = bits(instr, 12, 8) @[Core.scala 75:22]
    rd <= _rd_T @[Core.scala 75:14]
    node _rs1_T = bits(instr, 17, 13) @[Core.scala 76:22]
    rs1 <= _rs1_T @[Core.scala 76:14]
    node _rs1_i_T = bits(instr, 15, 13) @[Core.scala 77:36]
    node _rs1_i_T_1 = cat(UInt<2>("h0"), _rs1_i_T) @[Cat.scala 33:92]
    rs1_i <= _rs1_i_T_1 @[Core.scala 77:14]
    node _rs1_s_T = bits(instr, 15, 13) @[Core.scala 78:36]
    node _rs1_s_T_1 = cat(UInt<2>("h0"), _rs1_s_T) @[Cat.scala 33:92]
    rs1_s <= _rs1_s_T_1 @[Core.scala 78:14]
    node _rs2_T = bits(instr, 22, 18) @[Core.scala 79:22]
    rs2 <= _rs2_T @[Core.scala 79:14]
    node _rs2_s_T = bits(instr, 12, 8) @[Core.scala 80:22]
    rs2_s <= _rs2_s_T @[Core.scala 80:14]
    node _imm_T = bits(instr, 47, 16) @[Core.scala 81:22]
    imm <= _imm_T @[Core.scala 81:14]
    node _imm_r_T = bits(instr, 47, 23) @[Core.scala 82:22]
    imm_r <= _imm_r_T @[Core.scala 82:14]
    node _imm_r_sext_T = bits(imm_r, 24, 24) @[Core.scala 83:34]
    node _imm_r_sext_T_1 = bits(_imm_r_sext_T, 0, 0) @[Bitwise.scala 77:15]
    node _imm_r_sext_T_2 = mux(_imm_r_sext_T_1, UInt<7>("h7f"), UInt<7>("h0")) @[Bitwise.scala 77:12]
    node _imm_r_sext_T_3 = cat(_imm_r_sext_T_2, imm_r) @[Cat.scala 33:92]
    imm_r_sext <= _imm_r_sext_T_3 @[Core.scala 83:14]
    node _command_T = eq(opcode, UInt<5>("h1")) @[Core.scala 88:13]
    node _command_T_1 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 88:40]
    node _command_T_2 = and(_command_T, _command_T_1) @[Core.scala 88:26]
    node _command_T_3 = eq(opcode, UInt<5>("h1")) @[Core.scala 89:13]
    node _command_T_4 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 89:40]
    node _command_T_5 = and(_command_T_3, _command_T_4) @[Core.scala 89:26]
    node _command_T_6 = eq(opcode, UInt<5>("h2")) @[Core.scala 91:13]
    node _command_T_7 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 91:40]
    node _command_T_8 = and(_command_T_6, _command_T_7) @[Core.scala 91:26]
    node _command_T_9 = eq(opcode, UInt<5>("h2")) @[Core.scala 92:13]
    node _command_T_10 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 92:40]
    node _command_T_11 = and(_command_T_9, _command_T_10) @[Core.scala 92:26]
    node _command_T_12 = eq(opcode, UInt<5>("h3")) @[Core.scala 94:13]
    node _command_T_13 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 94:40]
    node _command_T_14 = and(_command_T_12, _command_T_13) @[Core.scala 94:26]
    node _command_T_15 = eq(opcode, UInt<5>("h3")) @[Core.scala 95:13]
    node _command_T_16 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 95:40]
    node _command_T_17 = and(_command_T_15, _command_T_16) @[Core.scala 95:26]
    node _command_T_18 = eq(opcode, UInt<5>("h3")) @[Core.scala 96:13]
    node _command_T_19 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 96:40]
    node _command_T_20 = and(_command_T_18, _command_T_19) @[Core.scala 96:26]
    node _command_T_21 = eq(opcode, UInt<5>("h3")) @[Core.scala 97:13]
    node _command_T_22 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 97:40]
    node _command_T_23 = and(_command_T_21, _command_T_22) @[Core.scala 97:26]
    node _command_T_24 = eq(opcode, UInt<5>("h3")) @[Core.scala 98:13]
    node _command_T_25 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 98:40]
    node _command_T_26 = and(_command_T_24, _command_T_25) @[Core.scala 98:26]
    node _command_T_27 = eq(opcode, UInt<5>("h4")) @[Core.scala 100:13]
    node _command_T_28 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 100:40]
    node _command_T_29 = and(_command_T_27, _command_T_28) @[Core.scala 100:26]
    node _command_T_30 = eq(opcode, UInt<5>("h4")) @[Core.scala 101:13]
    node _command_T_31 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 101:40]
    node _command_T_32 = and(_command_T_30, _command_T_31) @[Core.scala 101:26]
    node _command_T_33 = eq(opcode, UInt<5>("h5")) @[Core.scala 103:13]
    node _command_T_34 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 103:40]
    node _command_T_35 = and(_command_T_33, _command_T_34) @[Core.scala 103:26]
    node _command_T_36 = eq(opcode, UInt<5>("h6")) @[Core.scala 105:13]
    node _command_T_37 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 105:40]
    node _command_T_38 = and(_command_T_36, _command_T_37) @[Core.scala 105:26]
    node _command_T_39 = eq(opcode, UInt<5>("h6")) @[Core.scala 106:13]
    node _command_T_40 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 106:40]
    node _command_T_41 = and(_command_T_39, _command_T_40) @[Core.scala 106:26]
    node _command_T_42 = mux(_command_T_41, UInt<8>("h1"), UInt<8>("h0")) @[Mux.scala 101:16]
    node _command_T_43 = mux(_command_T_38, UInt<8>("h1"), _command_T_42) @[Mux.scala 101:16]
    node _command_T_44 = mux(_command_T_35, UInt<8>("h1"), _command_T_43) @[Mux.scala 101:16]
    node _command_T_45 = mux(_command_T_32, UInt<8>("h1"), _command_T_44) @[Mux.scala 101:16]
    node _command_T_46 = mux(_command_T_29, UInt<8>("h1"), _command_T_45) @[Mux.scala 101:16]
    node _command_T_47 = mux(_command_T_26, UInt<8>("h1"), _command_T_46) @[Mux.scala 101:16]
    node _command_T_48 = mux(_command_T_23, UInt<8>("h2"), _command_T_47) @[Mux.scala 101:16]
    node _command_T_49 = mux(_command_T_20, UInt<8>("h2"), _command_T_48) @[Mux.scala 101:16]
    node _command_T_50 = mux(_command_T_17, UInt<8>("h2"), _command_T_49) @[Mux.scala 101:16]
    node _command_T_51 = mux(_command_T_14, UInt<8>("h2"), _command_T_50) @[Mux.scala 101:16]
    node _command_T_52 = mux(_command_T_11, UInt<8>("h2"), _command_T_51) @[Mux.scala 101:16]
    node _command_T_53 = mux(_command_T_8, UInt<8>("h1"), _command_T_52) @[Mux.scala 101:16]
    node _command_T_54 = mux(_command_T_5, UInt<8>("h2"), _command_T_53) @[Mux.scala 101:16]
    node _command_T_55 = mux(_command_T_2, UInt<8>("h1"), _command_T_54) @[Mux.scala 101:16]
    command <= _command_T_55 @[Core.scala 86:11]
    alu.io.command <= command @[Core.scala 110:18]
    infer mport alu_io_a_MPORT = regfile[rs1], clock @[Core.scala 111:36]
    node _alu_io_a_T = eq(opcode, UInt<5>("h2")) @[Core.scala 114:13]
    node _alu_io_a_T_1 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 114:40]
    node _alu_io_a_T_2 = and(_alu_io_a_T, _alu_io_a_T_1) @[Core.scala 114:26]
    infer mport alu_io_a_MPORT_1 = regfile[rs1_i], clock @[Core.scala 114:65]
    node _alu_io_a_T_3 = eq(opcode, UInt<5>("h2")) @[Core.scala 117:13]
    node _alu_io_a_T_4 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 117:40]
    node _alu_io_a_T_5 = and(_alu_io_a_T_3, _alu_io_a_T_4) @[Core.scala 117:26]
    infer mport alu_io_a_MPORT_2 = regfile[rs1_i], clock @[Core.scala 117:65]
    node _alu_io_a_T_6 = eq(opcode, UInt<5>("h4")) @[Core.scala 120:13]
    node _alu_io_a_T_7 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 120:40]
    node _alu_io_a_T_8 = and(_alu_io_a_T_6, _alu_io_a_T_7) @[Core.scala 120:26]
    infer mport alu_io_a_MPORT_3 = regfile[rs1_i], clock @[Core.scala 120:65]
    node _alu_io_a_T_9 = eq(opcode, UInt<5>("h4")) @[Core.scala 122:13]
    node _alu_io_a_T_10 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 122:40]
    node _alu_io_a_T_11 = and(_alu_io_a_T_9, _alu_io_a_T_10) @[Core.scala 122:26]
    infer mport alu_io_a_MPORT_4 = regfile[rs1_i], clock @[Core.scala 122:65]
    node _alu_io_a_T_12 = eq(opcode, UInt<5>("h5")) @[Core.scala 125:13]
    node _alu_io_a_T_13 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 125:40]
    node _alu_io_a_T_14 = and(_alu_io_a_T_12, _alu_io_a_T_13) @[Core.scala 125:26]
    infer mport alu_io_a_MPORT_5 = regfile[rs1_s], clock @[Core.scala 125:65]
    node _alu_io_a_T_15 = eq(opcode, UInt<5>("h6")) @[Core.scala 128:13]
    node _alu_io_a_T_16 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 128:40]
    node _alu_io_a_T_17 = and(_alu_io_a_T_15, _alu_io_a_T_16) @[Core.scala 128:26]
    infer mport alu_io_a_MPORT_6 = regfile[rs1_i], clock @[Core.scala 128:65]
    node _alu_io_a_T_18 = eq(opcode, UInt<5>("h6")) @[Core.scala 130:13]
    node _alu_io_a_T_19 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 130:40]
    node _alu_io_a_T_20 = and(_alu_io_a_T_18, _alu_io_a_T_19) @[Core.scala 130:26]
    infer mport alu_io_a_MPORT_7 = regfile[rs1_s], clock @[Core.scala 130:65]
    node _alu_io_a_T_21 = eq(opcode, UInt<5>("h3")) @[Core.scala 133:13]
    node _alu_io_a_T_22 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 133:40]
    node _alu_io_a_T_23 = and(_alu_io_a_T_21, _alu_io_a_T_22) @[Core.scala 133:26]
    infer mport alu_io_a_MPORT_8 = regfile[rs1_i], clock @[Core.scala 133:65]
    node _alu_io_a_T_24 = mux(_alu_io_a_T_23, alu_io_a_MPORT_8, alu_io_a_MPORT) @[Mux.scala 101:16]
    node _alu_io_a_T_25 = mux(_alu_io_a_T_20, alu_io_a_MPORT_7, _alu_io_a_T_24) @[Mux.scala 101:16]
    node _alu_io_a_T_26 = mux(_alu_io_a_T_17, alu_io_a_MPORT_6, _alu_io_a_T_25) @[Mux.scala 101:16]
    node _alu_io_a_T_27 = mux(_alu_io_a_T_14, alu_io_a_MPORT_5, _alu_io_a_T_26) @[Mux.scala 101:16]
    node _alu_io_a_T_28 = mux(_alu_io_a_T_11, alu_io_a_MPORT_4, _alu_io_a_T_27) @[Mux.scala 101:16]
    node _alu_io_a_T_29 = mux(_alu_io_a_T_8, alu_io_a_MPORT_3, _alu_io_a_T_28) @[Mux.scala 101:16]
    node _alu_io_a_T_30 = mux(_alu_io_a_T_5, alu_io_a_MPORT_2, _alu_io_a_T_29) @[Mux.scala 101:16]
    node _alu_io_a_T_31 = mux(_alu_io_a_T_2, alu_io_a_MPORT_1, _alu_io_a_T_30) @[Mux.scala 101:16]
    alu.io.a <= _alu_io_a_T_31 @[Core.scala 111:18]
    node _alu_io_b_T = eq(opcode, UInt<5>("h1")) @[Core.scala 137:13]
    node _alu_io_b_T_1 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 137:40]
    node _alu_io_b_T_2 = and(_alu_io_b_T, _alu_io_b_T_1) @[Core.scala 137:26]
    infer mport alu_io_b_MPORT = regfile[rs2], clock @[Core.scala 137:65]
    node _alu_io_b_T_3 = eq(opcode, UInt<5>("h1")) @[Core.scala 139:13]
    node _alu_io_b_T_4 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 139:40]
    node _alu_io_b_T_5 = and(_alu_io_b_T_3, _alu_io_b_T_4) @[Core.scala 139:26]
    infer mport alu_io_b_MPORT_1 = regfile[rs2], clock @[Core.scala 139:65]
    node _alu_io_b_T_6 = eq(opcode, UInt<5>("h2")) @[Core.scala 142:13]
    node _alu_io_b_T_7 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 142:40]
    node _alu_io_b_T_8 = and(_alu_io_b_T_6, _alu_io_b_T_7) @[Core.scala 142:26]
    node _alu_io_b_T_9 = eq(opcode, UInt<5>("h2")) @[Core.scala 144:13]
    node _alu_io_b_T_10 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 144:40]
    node _alu_io_b_T_11 = and(_alu_io_b_T_9, _alu_io_b_T_10) @[Core.scala 144:26]
    node _alu_io_b_T_12 = eq(opcode, UInt<5>("h3")) @[Core.scala 147:13]
    node _alu_io_b_T_13 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 147:40]
    node _alu_io_b_T_14 = and(_alu_io_b_T_12, _alu_io_b_T_13) @[Core.scala 147:26]
    infer mport alu_io_b_MPORT_2 = regfile[rs2], clock @[Core.scala 147:65]
    node _alu_io_b_T_15 = eq(opcode, UInt<5>("h3")) @[Core.scala 149:13]
    node _alu_io_b_T_16 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 149:40]
    node _alu_io_b_T_17 = and(_alu_io_b_T_15, _alu_io_b_T_16) @[Core.scala 149:26]
    infer mport alu_io_b_MPORT_3 = regfile[rs2], clock @[Core.scala 149:65]
    node _alu_io_b_T_18 = eq(opcode, UInt<5>("h3")) @[Core.scala 151:13]
    node _alu_io_b_T_19 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 151:40]
    node _alu_io_b_T_20 = and(_alu_io_b_T_18, _alu_io_b_T_19) @[Core.scala 151:26]
    infer mport alu_io_b_MPORT_4 = regfile[rs2], clock @[Core.scala 151:65]
    node _alu_io_b_T_21 = eq(opcode, UInt<5>("h3")) @[Core.scala 153:13]
    node _alu_io_b_T_22 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 153:40]
    node _alu_io_b_T_23 = and(_alu_io_b_T_21, _alu_io_b_T_22) @[Core.scala 153:26]
    infer mport alu_io_b_MPORT_5 = regfile[rs2], clock @[Core.scala 153:65]
    node _alu_io_b_T_24 = eq(opcode, UInt<5>("h3")) @[Core.scala 155:13]
    node _alu_io_b_T_25 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 155:40]
    node _alu_io_b_T_26 = and(_alu_io_b_T_24, _alu_io_b_T_25) @[Core.scala 155:26]
    node _alu_io_b_T_27 = eq(opcode, UInt<5>("h4")) @[Core.scala 158:13]
    node _alu_io_b_T_28 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 158:40]
    node _alu_io_b_T_29 = and(_alu_io_b_T_27, _alu_io_b_T_28) @[Core.scala 158:26]
    node _alu_io_b_T_30 = eq(opcode, UInt<5>("h4")) @[Core.scala 160:13]
    node _alu_io_b_T_31 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 160:40]
    node _alu_io_b_T_32 = and(_alu_io_b_T_30, _alu_io_b_T_31) @[Core.scala 160:26]
    node _alu_io_b_T_33 = eq(opcode, UInt<5>("h5")) @[Core.scala 163:13]
    node _alu_io_b_T_34 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 163:40]
    node _alu_io_b_T_35 = and(_alu_io_b_T_33, _alu_io_b_T_34) @[Core.scala 163:26]
    node _alu_io_b_T_36 = eq(opcode, UInt<5>("h6")) @[Core.scala 166:13]
    node _alu_io_b_T_37 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 166:40]
    node _alu_io_b_T_38 = and(_alu_io_b_T_36, _alu_io_b_T_37) @[Core.scala 166:26]
    node _alu_io_b_T_39 = eq(opcode, UInt<5>("h6")) @[Core.scala 168:13]
    node _alu_io_b_T_40 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 168:40]
    node _alu_io_b_T_41 = and(_alu_io_b_T_39, _alu_io_b_T_40) @[Core.scala 168:26]
    node _alu_io_b_T_42 = mux(_alu_io_b_T_41, imm, UInt<32>("h0")) @[Mux.scala 101:16]
    node _alu_io_b_T_43 = mux(_alu_io_b_T_38, imm, _alu_io_b_T_42) @[Mux.scala 101:16]
    node _alu_io_b_T_44 = mux(_alu_io_b_T_35, imm, _alu_io_b_T_43) @[Mux.scala 101:16]
    node _alu_io_b_T_45 = mux(_alu_io_b_T_32, imm, _alu_io_b_T_44) @[Mux.scala 101:16]
    node _alu_io_b_T_46 = mux(_alu_io_b_T_29, imm, _alu_io_b_T_45) @[Mux.scala 101:16]
    node _alu_io_b_T_47 = mux(_alu_io_b_T_26, imm, _alu_io_b_T_46) @[Mux.scala 101:16]
    node _alu_io_b_T_48 = mux(_alu_io_b_T_23, alu_io_b_MPORT_5, _alu_io_b_T_47) @[Mux.scala 101:16]
    node _alu_io_b_T_49 = mux(_alu_io_b_T_20, alu_io_b_MPORT_4, _alu_io_b_T_48) @[Mux.scala 101:16]
    node _alu_io_b_T_50 = mux(_alu_io_b_T_17, alu_io_b_MPORT_3, _alu_io_b_T_49) @[Mux.scala 101:16]
    node _alu_io_b_T_51 = mux(_alu_io_b_T_14, alu_io_b_MPORT_2, _alu_io_b_T_50) @[Mux.scala 101:16]
    node _alu_io_b_T_52 = mux(_alu_io_b_T_11, imm, _alu_io_b_T_51) @[Mux.scala 101:16]
    node _alu_io_b_T_53 = mux(_alu_io_b_T_8, imm, _alu_io_b_T_52) @[Mux.scala 101:16]
    node _alu_io_b_T_54 = mux(_alu_io_b_T_5, alu_io_b_MPORT_1, _alu_io_b_T_53) @[Mux.scala 101:16]
    node _alu_io_b_T_55 = mux(_alu_io_b_T_2, alu_io_b_MPORT, _alu_io_b_T_54) @[Mux.scala 101:16]
    alu.io.b <= _alu_io_b_T_55 @[Core.scala 135:18]
    node _dmem_raw_T = add(alu.io.out, UInt<1>("h0")) @[Core.scala 172:47]
    node _dmem_raw_T_1 = tail(_dmem_raw_T, 1) @[Core.scala 172:47]
    wire _dmem_raw_WIRE : UInt @[Core.scala 172:35]
    _dmem_raw_WIRE is invalid @[Core.scala 172:35]
    when UInt<1>("h1") : @[Core.scala 172:35]
      _dmem_raw_WIRE <= _dmem_raw_T_1 @[Core.scala 172:35]
      node _dmem_raw_T_2 = or(_dmem_raw_WIRE, UInt<12>("h0")) @[Core.scala 172:35]
      node _dmem_raw_T_3 = bits(_dmem_raw_T_2, 11, 0) @[Core.scala 172:35]
      read mport dmem_raw_MPORT = dmem[_dmem_raw_T_3], clock @[Core.scala 172:35]
    node _dmem_raw_T_4 = add(alu.io.out, UInt<1>("h1")) @[Core.scala 172:47]
    node _dmem_raw_T_5 = tail(_dmem_raw_T_4, 1) @[Core.scala 172:47]
    wire _dmem_raw_WIRE_1 : UInt @[Core.scala 172:35]
    _dmem_raw_WIRE_1 is invalid @[Core.scala 172:35]
    when UInt<1>("h1") : @[Core.scala 172:35]
      _dmem_raw_WIRE_1 <= _dmem_raw_T_5 @[Core.scala 172:35]
      node _dmem_raw_T_6 = or(_dmem_raw_WIRE_1, UInt<12>("h0")) @[Core.scala 172:35]
      node _dmem_raw_T_7 = bits(_dmem_raw_T_6, 11, 0) @[Core.scala 172:35]
      read mport dmem_raw_MPORT_1 = dmem[_dmem_raw_T_7], clock @[Core.scala 172:35]
    node _dmem_raw_T_8 = add(alu.io.out, UInt<2>("h2")) @[Core.scala 172:47]
    node _dmem_raw_T_9 = tail(_dmem_raw_T_8, 1) @[Core.scala 172:47]
    wire _dmem_raw_WIRE_2 : UInt @[Core.scala 172:35]
    _dmem_raw_WIRE_2 is invalid @[Core.scala 172:35]
    when UInt<1>("h1") : @[Core.scala 172:35]
      _dmem_raw_WIRE_2 <= _dmem_raw_T_9 @[Core.scala 172:35]
      node _dmem_raw_T_10 = or(_dmem_raw_WIRE_2, UInt<12>("h0")) @[Core.scala 172:35]
      node _dmem_raw_T_11 = bits(_dmem_raw_T_10, 11, 0) @[Core.scala 172:35]
      read mport dmem_raw_MPORT_2 = dmem[_dmem_raw_T_11], clock @[Core.scala 172:35]
    node _dmem_raw_T_12 = add(alu.io.out, UInt<2>("h3")) @[Core.scala 172:47]
    node _dmem_raw_T_13 = tail(_dmem_raw_T_12, 1) @[Core.scala 172:47]
    wire _dmem_raw_WIRE_3 : UInt @[Core.scala 172:35]
    _dmem_raw_WIRE_3 is invalid @[Core.scala 172:35]
    when UInt<1>("h1") : @[Core.scala 172:35]
      _dmem_raw_WIRE_3 <= _dmem_raw_T_13 @[Core.scala 172:35]
      node _dmem_raw_T_14 = or(_dmem_raw_WIRE_3, UInt<12>("h0")) @[Core.scala 172:35]
      node _dmem_raw_T_15 = bits(_dmem_raw_T_14, 11, 0) @[Core.scala 172:35]
      read mport dmem_raw_MPORT_3 = dmem[_dmem_raw_T_15], clock @[Core.scala 172:35]
    node dmem_raw_lo = cat(dmem_raw_MPORT_1, dmem_raw_MPORT) @[Cat.scala 33:92]
    node dmem_raw_hi = cat(dmem_raw_MPORT_3, dmem_raw_MPORT_2) @[Cat.scala 33:92]
    node _dmem_raw_T_16 = cat(dmem_raw_hi, dmem_raw_lo) @[Cat.scala 33:92]
    dmem_raw <= _dmem_raw_T_16 @[Core.scala 171:12]
    node _T = eq(opcode, UInt<5>("h5")) @[Core.scala 175:16]
    node _T_1 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 175:45]
    node _T_2 = and(_T, _T_1) @[Core.scala 175:30]
    when _T_2 : @[Core.scala 175:60]
      node _T_3 = add(alu.io.out, UInt<1>("h0")) @[Core.scala 177:23]
      node _T_4 = tail(_T_3, 1) @[Core.scala 177:23]
      node _T_5 = bits(_T_4, 11, 0) @[Core.scala 177:11]
      infer mport MPORT = dmem[_T_5], clock @[Core.scala 177:11]
      infer mport MPORT_1 = regfile[rs2_s], clock @[Core.scala 177:40]
      node _T_6 = bits(MPORT_1, 7, 0) @[Core.scala 177:47]
      MPORT <= _T_6 @[Core.scala 177:30]
      node _T_7 = add(alu.io.out, UInt<1>("h1")) @[Core.scala 177:23]
      node _T_8 = tail(_T_7, 1) @[Core.scala 177:23]
      node _T_9 = bits(_T_8, 11, 0) @[Core.scala 177:11]
      infer mport MPORT_2 = dmem[_T_9], clock @[Core.scala 177:11]
      infer mport MPORT_3 = regfile[rs2_s], clock @[Core.scala 177:40]
      node _T_10 = bits(MPORT_3, 15, 8) @[Core.scala 177:47]
      MPORT_2 <= _T_10 @[Core.scala 177:30]
      node _T_11 = add(alu.io.out, UInt<2>("h2")) @[Core.scala 177:23]
      node _T_12 = tail(_T_11, 1) @[Core.scala 177:23]
      node _T_13 = bits(_T_12, 11, 0) @[Core.scala 177:11]
      infer mport MPORT_4 = dmem[_T_13], clock @[Core.scala 177:11]
      infer mport MPORT_5 = regfile[rs2_s], clock @[Core.scala 177:40]
      node _T_14 = bits(MPORT_5, 23, 16) @[Core.scala 177:47]
      MPORT_4 <= _T_14 @[Core.scala 177:30]
      node _T_15 = add(alu.io.out, UInt<2>("h3")) @[Core.scala 177:23]
      node _T_16 = tail(_T_15, 1) @[Core.scala 177:23]
      node _T_17 = bits(_T_16, 11, 0) @[Core.scala 177:11]
      infer mport MPORT_6 = dmem[_T_17], clock @[Core.scala 177:11]
      infer mport MPORT_7 = regfile[rs2_s], clock @[Core.scala 177:40]
      node _T_18 = bits(MPORT_7, 31, 24) @[Core.scala 177:47]
      MPORT_6 <= _T_18 @[Core.scala 177:30]
    load_ready <= UInt<1>("h0") @[Core.scala 182:14]
    node _T_19 = eq(opcode, UInt<5>("h4")) @[Core.scala 183:16]
    node _T_20 = eq(load_ready, UInt<1>("h0")) @[Core.scala 183:33]
    node _T_21 = and(_T_19, _T_20) @[Core.scala 183:30]
    when _T_21 : @[Core.scala 183:46]
      load_ready <= UInt<1>("h1") @[Core.scala 184:16]
    infer mport MPORT_8 = regfile[rd], clock @[Core.scala 187:10]
    node _T_22 = eq(rd, UInt<1>("h0")) @[Core.scala 188:9]
    node _T_23 = eq(opcode, UInt<5>("h3")) @[Core.scala 190:13]
    node _T_24 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 190:40]
    node _T_25 = and(_T_23, _T_24) @[Core.scala 190:26]
    node _T_26 = add(pc, UInt<3>("h6")) @[Core.scala 190:61]
    node _T_27 = tail(_T_26, 1) @[Core.scala 190:61]
    node _T_28 = eq(opcode, UInt<5>("h3")) @[Core.scala 191:13]
    node _T_29 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 191:40]
    node _T_30 = and(_T_28, _T_29) @[Core.scala 191:26]
    node _T_31 = add(pc, UInt<3>("h6")) @[Core.scala 191:61]
    node _T_32 = tail(_T_31, 1) @[Core.scala 191:61]
    node _T_33 = eq(opcode, UInt<5>("h3")) @[Core.scala 192:13]
    node _T_34 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 192:40]
    node _T_35 = and(_T_33, _T_34) @[Core.scala 192:26]
    node _T_36 = add(pc, UInt<3>("h6")) @[Core.scala 192:61]
    node _T_37 = tail(_T_36, 1) @[Core.scala 192:61]
    node _T_38 = eq(opcode, UInt<5>("h3")) @[Core.scala 193:13]
    node _T_39 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 193:40]
    node _T_40 = and(_T_38, _T_39) @[Core.scala 193:26]
    node _T_41 = add(pc, UInt<3>("h6")) @[Core.scala 193:61]
    node _T_42 = tail(_T_41, 1) @[Core.scala 193:61]
    node _T_43 = eq(opcode, UInt<5>("h3")) @[Core.scala 194:13]
    node _T_44 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 194:40]
    node _T_45 = and(_T_43, _T_44) @[Core.scala 194:26]
    node _T_46 = add(pc, UInt<3>("h6")) @[Core.scala 194:61]
    node _T_47 = tail(_T_46, 1) @[Core.scala 194:61]
    node _T_48 = eq(opcode, UInt<5>("h4")) @[Core.scala 196:13]
    node _T_49 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 196:40]
    node _T_50 = and(_T_48, _T_49) @[Core.scala 196:26]
    node _T_51 = eq(opcode, UInt<5>("h4")) @[Core.scala 197:13]
    node _T_52 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 197:40]
    node _T_53 = and(_T_51, _T_52) @[Core.scala 197:26]
    node _T_54 = and(UInt<8>("hff"), dmem_raw) @[Core.scala 197:65]
    node _T_55 = eq(opcode, UInt<5>("h5")) @[Core.scala 198:13]
    node _T_56 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 198:40]
    node _T_57 = and(_T_55, _T_56) @[Core.scala 198:26]
    infer mport MPORT_9 = regfile[rd], clock @[Core.scala 198:65]
    node _T_58 = eq(opcode, UInt<5>("h6")) @[Core.scala 200:13]
    node _T_59 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 200:40]
    node _T_60 = and(_T_58, _T_59) @[Core.scala 200:26]
    node _T_61 = and(_T_60, ioBus.io.din.valid) @[Core.scala 200:53]
    node _T_62 = eq(opcode, UInt<5>("h6")) @[Core.scala 201:13]
    node _T_63 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 201:40]
    node _T_64 = and(_T_62, _T_63) @[Core.scala 201:26]
    node _T_65 = eq(ioBus.io.din.valid, UInt<1>("h0")) @[Core.scala 201:56]
    node _T_66 = and(_T_64, _T_65) @[Core.scala 201:53]
    infer mport MPORT_10 = regfile[rd], clock @[Core.scala 201:88]
    node _T_67 = eq(opcode, UInt<5>("h6")) @[Core.scala 202:13]
    node _T_68 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 202:40]
    node _T_69 = and(_T_67, _T_68) @[Core.scala 202:26]
    infer mport MPORT_11 = regfile[rd], clock @[Core.scala 202:65]
    node _T_70 = mux(_T_69, MPORT_11, alu.io.out) @[Mux.scala 101:16]
    node _T_71 = mux(_T_66, MPORT_10, _T_70) @[Mux.scala 101:16]
    node _T_72 = mux(_T_61, ioBus.io.din.bits, _T_71) @[Mux.scala 101:16]
    node _T_73 = mux(_T_57, MPORT_9, _T_72) @[Mux.scala 101:16]
    node _T_74 = mux(_T_53, _T_54, _T_73) @[Mux.scala 101:16]
    node _T_75 = mux(_T_50, dmem_raw, _T_74) @[Mux.scala 101:16]
    node _T_76 = mux(_T_45, _T_47, _T_75) @[Mux.scala 101:16]
    node _T_77 = mux(_T_40, _T_42, _T_76) @[Mux.scala 101:16]
    node _T_78 = mux(_T_35, _T_37, _T_77) @[Mux.scala 101:16]
    node _T_79 = mux(_T_30, _T_32, _T_78) @[Mux.scala 101:16]
    node _T_80 = mux(_T_25, _T_27, _T_79) @[Mux.scala 101:16]
    node _T_81 = mux(_T_22, UInt<32>("h0"), _T_80) @[Mux.scala 101:16]
    MPORT_8 <= _T_81 @[Core.scala 187:18]
    ioBus.io.devId <= alu.io.out @[Core.scala 206:18]
    node _ioBus_io_din_ready_T = eq(opcode, UInt<5>("h6")) @[Core.scala 208:33]
    node _ioBus_io_din_ready_T_1 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 208:60]
    node _ioBus_io_din_ready_T_2 = and(_ioBus_io_din_ready_T, _ioBus_io_din_ready_T_1) @[Core.scala 208:46]
    node _ioBus_io_din_ready_T_3 = and(_ioBus_io_din_ready_T_2, ioBus.io.din.valid) @[Core.scala 208:74]
    ioBus.io.din.ready <= _ioBus_io_din_ready_T_3 @[Core.scala 208:22]
    node _ioBus_io_dout_valid_T = eq(opcode, UInt<5>("h6")) @[Core.scala 210:34]
    node _ioBus_io_dout_valid_T_1 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 210:61]
    node _ioBus_io_dout_valid_T_2 = and(_ioBus_io_dout_valid_T, _ioBus_io_dout_valid_T_1) @[Core.scala 210:47]
    ioBus.io.dout.valid <= _ioBus_io_dout_valid_T_2 @[Core.scala 210:23]
    infer mport ioBus_io_dout_bits_MPORT = regfile[rs2_s], clock @[Core.scala 211:32]
    ioBus.io.dout.bits <= ioBus_io_dout_bits_MPORT @[Core.scala 211:22]
    infer mport io_led_MPORT = regfile[UInt<5>("h1")], clock @[Core.scala 214:20]
    node _io_led_T = bits(io_led_MPORT, 5, 0) @[Core.scala 214:30]
    io.led <= _io_led_T @[Core.scala 214:10]

