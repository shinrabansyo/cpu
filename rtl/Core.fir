circuit Core :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip command : UInt<8>, flip a : UInt<32>, flip b : UInt<32>, zero : UInt<1>, out : UInt<32>}

    node _io_zero_T = eq(io.out, UInt<32>("h0")) @[Alu.scala 17:22]
    io.zero <= _io_zero_T @[Alu.scala 17:11]
    node _io_out_T = eq(io.command, UInt<8>("h1")) @[Alu.scala 20:17]
    node _io_out_T_1 = add(io.a, io.b) @[Alu.scala 20:40]
    node _io_out_T_2 = tail(_io_out_T_1, 1) @[Alu.scala 20:40]
    node _io_out_T_3 = eq(io.command, UInt<8>("h2")) @[Alu.scala 21:17]
    node _io_out_T_4 = sub(io.a, io.b) @[Alu.scala 21:40]
    node _io_out_T_5 = tail(_io_out_T_4, 1) @[Alu.scala 21:40]
    node _io_out_T_6 = eq(io.command, UInt<8>("h3")) @[Alu.scala 22:17]
    node _io_out_T_7 = and(io.a, io.b) @[Alu.scala 22:40]
    node _io_out_T_8 = eq(io.command, UInt<8>("h4")) @[Alu.scala 23:17]
    node _io_out_T_9 = or(io.a, io.b) @[Alu.scala 23:40]
    node _io_out_T_10 = eq(io.command, UInt<8>("h5")) @[Alu.scala 24:17]
    node _io_out_T_11 = xor(io.a, io.b) @[Alu.scala 24:40]
    node _io_out_T_12 = eq(io.command, UInt<8>("h6")) @[Alu.scala 25:17]
    node _io_out_T_13 = bits(io.b, 4, 0) @[Alu.scala 25:47]
    node _io_out_T_14 = dshr(io.a, _io_out_T_13) @[Alu.scala 25:40]
    node _io_out_T_15 = eq(io.command, UInt<8>("h7")) @[Alu.scala 26:17]
    node _io_out_T_16 = asSInt(io.a) @[Alu.scala 26:40]
    node _io_out_T_17 = bits(io.b, 4, 0) @[Alu.scala 26:54]
    node _io_out_T_18 = dshr(_io_out_T_16, _io_out_T_17) @[Alu.scala 26:47]
    node _io_out_T_19 = asUInt(_io_out_T_18) @[Alu.scala 26:62]
    node _io_out_T_20 = eq(io.command, UInt<8>("h8")) @[Alu.scala 27:17]
    node _io_out_T_21 = bits(io.b, 4, 0) @[Alu.scala 27:47]
    node _io_out_T_22 = dshl(io.a, _io_out_T_21) @[Alu.scala 27:40]
    node _io_out_T_23 = mux(_io_out_T_20, _io_out_T_22, UInt<32>("h0")) @[Mux.scala 101:16]
    node _io_out_T_24 = mux(_io_out_T_15, _io_out_T_19, _io_out_T_23) @[Mux.scala 101:16]
    node _io_out_T_25 = mux(_io_out_T_12, _io_out_T_14, _io_out_T_24) @[Mux.scala 101:16]
    node _io_out_T_26 = mux(_io_out_T_10, _io_out_T_11, _io_out_T_25) @[Mux.scala 101:16]
    node _io_out_T_27 = mux(_io_out_T_8, _io_out_T_9, _io_out_T_26) @[Mux.scala 101:16]
    node _io_out_T_28 = mux(_io_out_T_6, _io_out_T_7, _io_out_T_27) @[Mux.scala 101:16]
    node _io_out_T_29 = mux(_io_out_T_3, _io_out_T_5, _io_out_T_28) @[Mux.scala 101:16]
    node _io_out_T_30 = mux(_io_out_T, _io_out_T_2, _io_out_T_29) @[Mux.scala 101:16]
    io.out <= _io_out_T_30 @[Alu.scala 19:10]

  module UartTx :
    input clock : Clock
    input reset : Reset
    output io : { tx : UInt<1>, flip din : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}}

    reg rateCounter : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[Uart.scala 26:28]
    reg bitCounter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 27:28]
    reg bits : UInt<1>[10], clock with :
      reset => (UInt<1>("h0"), bits) @[Uart.scala 28:24]
    node _io_tx_T = eq(bitCounter, UInt<1>("h0")) @[Uart.scala 30:23]
    node _io_tx_T_1 = or(_io_tx_T, bits[0]) @[Uart.scala 30:31]
    io.tx <= _io_tx_T_1 @[Uart.scala 30:9]
    node ready = eq(bitCounter, UInt<1>("h0")) @[Uart.scala 31:26]
    io.din.ready <= ready @[Uart.scala 32:16]
    node _T = and(ready, io.din.valid) @[Uart.scala 38:14]
    when _T : @[Uart.scala 38:31]
      node hi = cat(UInt<1>("h1"), io.din.bits) @[Cat.scala 33:92]
      node _T_1 = cat(hi, UInt<1>("h0")) @[Cat.scala 33:92]
      node _T_2 = bits(_T_1, 0, 0) @[Uart.scala 39:40]
      node _T_3 = bits(_T_1, 1, 1) @[Uart.scala 39:40]
      node _T_4 = bits(_T_1, 2, 2) @[Uart.scala 39:40]
      node _T_5 = bits(_T_1, 3, 3) @[Uart.scala 39:40]
      node _T_6 = bits(_T_1, 4, 4) @[Uart.scala 39:40]
      node _T_7 = bits(_T_1, 5, 5) @[Uart.scala 39:40]
      node _T_8 = bits(_T_1, 6, 6) @[Uart.scala 39:40]
      node _T_9 = bits(_T_1, 7, 7) @[Uart.scala 39:40]
      node _T_10 = bits(_T_1, 8, 8) @[Uart.scala 39:40]
      node _T_11 = bits(_T_1, 9, 9) @[Uart.scala 39:40]
      bits[0] <= _T_2 @[Uart.scala 39:10]
      bits[1] <= _T_3 @[Uart.scala 39:10]
      bits[2] <= _T_4 @[Uart.scala 39:10]
      bits[3] <= _T_5 @[Uart.scala 39:10]
      bits[4] <= _T_6 @[Uart.scala 39:10]
      bits[5] <= _T_7 @[Uart.scala 39:10]
      bits[6] <= _T_8 @[Uart.scala 39:10]
      bits[7] <= _T_9 @[Uart.scala 39:10]
      bits[8] <= _T_10 @[Uart.scala 39:10]
      bits[9] <= _T_11 @[Uart.scala 39:10]
      bitCounter <= UInt<4>("ha") @[Uart.scala 40:16]
      rateCounter <= UInt<12>("h83c") @[Uart.scala 41:17]
    node _T_12 = gt(bitCounter, UInt<1>("h0")) @[Uart.scala 43:20]
    when _T_12 : @[Uart.scala 43:28]
      node _T_13 = eq(rateCounter, UInt<1>("h0")) @[Uart.scala 44:22]
      when _T_13 : @[Uart.scala 44:31]
        bits[0] <= bits[1] @[Uart.scala 47:37]
        bits[1] <= bits[2] @[Uart.scala 47:37]
        bits[2] <= bits[3] @[Uart.scala 47:37]
        bits[3] <= bits[4] @[Uart.scala 47:37]
        bits[4] <= bits[5] @[Uart.scala 47:37]
        bits[5] <= bits[6] @[Uart.scala 47:37]
        bits[6] <= bits[7] @[Uart.scala 47:37]
        bits[7] <= bits[8] @[Uart.scala 47:37]
        bits[8] <= bits[9] @[Uart.scala 47:37]
        node _bitCounter_T = sub(bitCounter, UInt<1>("h1")) @[Uart.scala 48:32]
        node _bitCounter_T_1 = tail(_bitCounter_T, 1) @[Uart.scala 48:32]
        bitCounter <= _bitCounter_T_1 @[Uart.scala 48:18]
        rateCounter <= UInt<12>("h83c") @[Uart.scala 49:19]
      else :
        node _rateCounter_T = sub(rateCounter, UInt<1>("h1")) @[Uart.scala 51:34]
        node _rateCounter_T_1 = tail(_rateCounter_T, 1) @[Uart.scala 51:34]
        rateCounter <= _rateCounter_T_1 @[Uart.scala 51:19]


  module UartRx :
    input clock : Clock
    input reset : Reset
    output io : { dout : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, flip rx : UInt<1>, overrun : UInt<1>}

    reg rateCounter : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[Uart.scala 63:28]
    reg bitCounter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 65:27]
    reg bits : UInt<1>[10], clock with :
      reset => (UInt<1>("h0"), bits) @[Uart.scala 66:17]
    wire _rxRegs_WIRE : UInt<1>[3] @[Uart.scala 68:31]
    _rxRegs_WIRE[0] <= UInt<1>("h0") @[Uart.scala 68:31]
    _rxRegs_WIRE[1] <= UInt<1>("h0") @[Uart.scala 68:31]
    _rxRegs_WIRE[2] <= UInt<1>("h0") @[Uart.scala 68:31]
    reg rxRegs : UInt<1>[3], clock with :
      reset => (reset, _rxRegs_WIRE) @[Uart.scala 68:23]
    reg overrun : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 72:24]
    reg running : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 73:24]
    reg outValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 76:25]
    reg outBits : UInt<8>, clock with :
      reset => (UInt<1>("h0"), outBits) @[Uart.scala 77:20]
    wire outReady : UInt<1> @[Uart.scala 78:29]
    outReady <= io.dout.ready @[Uart.scala 78:29]
    io.dout.valid <= outValid @[Uart.scala 79:17]
    io.dout.bits <= outBits @[Uart.scala 80:16]
    node _T = and(outValid, outReady) @[Uart.scala 83:17]
    when _T : @[Uart.scala 83:30]
      outValid <= UInt<1>("h0") @[Uart.scala 84:14]
    rxRegs[2] <= io.rx @[Uart.scala 97:24]
    rxRegs[0] <= rxRegs[1] @[Uart.scala 98:50]
    rxRegs[1] <= rxRegs[2] @[Uart.scala 98:50]
    io.overrun <= overrun @[Uart.scala 104:14]
    node _T_1 = eq(running, UInt<1>("h0")) @[Uart.scala 107:8]
    when _T_1 : @[Uart.scala 107:18]
      node _T_2 = eq(rxRegs[1], UInt<1>("h0")) @[Uart.scala 108:10]
      node _T_3 = and(_T_2, rxRegs[0]) @[Uart.scala 108:21]
      when _T_3 : @[Uart.scala 108:35]
        rateCounter <= UInt<12>("hc5a") @[Uart.scala 110:19]
        bitCounter <= UInt<4>("h9") @[Uart.scala 111:18]
        running <= UInt<1>("h1") @[Uart.scala 112:15]
    else :
      node _T_4 = eq(rateCounter, UInt<1>("h0")) @[Uart.scala 115:22]
      when _T_4 : @[Uart.scala 115:31]
        bits[9] <= rxRegs[0] @[Uart.scala 116:22]
        bits[0] <= bits[1] @[Uart.scala 117:45]
        bits[1] <= bits[2] @[Uart.scala 117:45]
        bits[2] <= bits[3] @[Uart.scala 117:45]
        bits[3] <= bits[4] @[Uart.scala 117:45]
        bits[4] <= bits[5] @[Uart.scala 117:45]
        bits[5] <= bits[6] @[Uart.scala 117:45]
        bits[6] <= bits[7] @[Uart.scala 117:45]
        bits[7] <= bits[8] @[Uart.scala 117:45]
        bits[8] <= bits[9] @[Uart.scala 117:45]
        node _T_5 = eq(bitCounter, UInt<1>("h0")) @[Uart.scala 119:23]
        when _T_5 : @[Uart.scala 119:32]
          outValid <= UInt<1>("h1") @[Uart.scala 120:18]
          node outBits_lo_lo = cat(bits[2], bits[1]) @[Cat.scala 33:92]
          node outBits_lo_hi = cat(bits[4], bits[3]) @[Cat.scala 33:92]
          node outBits_lo = cat(outBits_lo_hi, outBits_lo_lo) @[Cat.scala 33:92]
          node outBits_hi_lo = cat(bits[6], bits[5]) @[Cat.scala 33:92]
          node outBits_hi_hi = cat(bits[8], bits[7]) @[Cat.scala 33:92]
          node outBits_hi = cat(outBits_hi_hi, outBits_hi_lo) @[Cat.scala 33:92]
          node _outBits_T = cat(outBits_hi, outBits_lo) @[Cat.scala 33:92]
          outBits <= _outBits_T @[Uart.scala 121:17]
          overrun <= outValid @[Uart.scala 122:17]
          running <= UInt<1>("h0") @[Uart.scala 126:17]
        else :
          rateCounter <= UInt<12>("h83c") @[Uart.scala 128:21]
          node _bitCounter_T = sub(bitCounter, UInt<1>("h1")) @[Uart.scala 129:34]
          node _bitCounter_T_1 = tail(_bitCounter_T, 1) @[Uart.scala 129:34]
          bitCounter <= _bitCounter_T_1 @[Uart.scala 129:20]
      else :
        node _rateCounter_T = sub(rateCounter, UInt<1>("h1")) @[Uart.scala 132:34]
        node _rateCounter_T_1 = tail(_rateCounter_T, 1) @[Uart.scala 132:34]
        rateCounter <= _rateCounter_T_1 @[Uart.scala 132:19]


  module Spi :
    input clock : Clock
    input reset : Reset
    output io : { mosi : UInt<1>, flip miso : UInt<1>, sclk : UInt<1>, flip din : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, dout : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, flip clkshamt : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<3>}, clkshamtO : UInt<3>, flip spiMode : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, spiModeO : UInt<2>}

    reg sclk : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Spi.scala 24:21]
    reg sclkCounter : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[Spi.scala 25:28]
    reg clkshamt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Spi.scala 26:25]
    wire posedge : UInt<1> @[Spi.scala 27:21]
    wire negedge : UInt<1> @[Spi.scala 28:21]
    reg shiftReg : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Spi.scala 31:25]
    reg bitCounter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Spi.scala 32:27]
    reg busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Spi.scala 33:21]
    reg misoBuf : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Spi.scala 34:24]
    reg spiModeReady : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Spi.scala 35:29]
    reg clkshamtReady : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Spi.scala 36:30]
    reg outValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Spi.scala 37:25]
    reg cpol : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Spi.scala 38:21]
    reg cpha : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Spi.scala 39:21]
    wire mode_1_2 : UInt<1> @[Spi.scala 40:22]
    reg isFirstSclk : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Spi.scala 41:28]
    io.clkshamtO <= clkshamt @[Spi.scala 48:16]
    node _io_spiModeO_T = cat(cpol, cpha) @[Cat.scala 33:92]
    io.spiModeO <= _io_spiModeO_T @[Spi.scala 49:15]
    posedge <= UInt<1>("h0") @[Spi.scala 51:11]
    negedge <= UInt<1>("h0") @[Spi.scala 52:11]
    io.sclk <= sclk @[Spi.scala 55:11]
    when busy : @[Spi.scala 56:14]
      node _T = eq(sclkCounter, UInt<1>("h0")) @[Spi.scala 57:22]
      when _T : @[Spi.scala 57:31]
        isFirstSclk <= UInt<1>("h0") @[Spi.scala 58:19]
        node _posedge_T = not(sclk) @[Spi.scala 59:18]
        posedge <= _posedge_T @[Spi.scala 59:15]
        negedge <= sclk @[Spi.scala 60:15]
        node _sclkCounter_T = dshl(UInt<1>("h1"), clkshamt) @[Spi.scala 61:27]
        node _sclkCounter_T_1 = sub(_sclkCounter_T, UInt<1>("h1")) @[Spi.scala 61:40]
        node _sclkCounter_T_2 = tail(_sclkCounter_T_1, 1) @[Spi.scala 61:40]
        sclkCounter <= _sclkCounter_T_2 @[Spi.scala 61:19]
        node _T_1 = eq(bitCounter, UInt<1>("h1")) @[Spi.scala 62:25]
        node _T_2 = eq(sclk, cpol) @[Spi.scala 62:41]
        node _T_3 = and(_T_1, _T_2) @[Spi.scala 62:33]
        node _T_4 = and(_T_3, cpha) @[Spi.scala 62:50]
        node _T_5 = eq(_T_4, UInt<1>("h0")) @[Spi.scala 62:12]
        when _T_5 : @[Spi.scala 62:60]
          node _sclk_T = not(sclk) @[Spi.scala 63:17]
          sclk <= _sclk_T @[Spi.scala 63:14]
      else :
        node _sclkCounter_T_3 = sub(sclkCounter, UInt<1>("h1")) @[Spi.scala 66:34]
        node _sclkCounter_T_4 = tail(_sclkCounter_T_3, 1) @[Spi.scala 66:34]
        sclkCounter <= _sclkCounter_T_4 @[Spi.scala 66:19]
    else :
      node _T_6 = and(io.spiMode.valid, io.spiMode.ready) @[Spi.scala 68:33]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[Spi.scala 68:14]
      when _T_7 : @[Spi.scala 68:55]
        sclk <= cpol @[Spi.scala 69:10]
    node _mode_1_2_T = xor(cpol, cpha) @[Spi.scala 77:21]
    mode_1_2 <= _mode_1_2_T @[Spi.scala 77:12]
    node _io_din_ready_T = and(io.din.valid, busy) @[Spi.scala 79:32]
    node _io_din_ready_T_1 = eq(bitCounter, UInt<1>("h0")) @[Spi.scala 79:54]
    node _io_din_ready_T_2 = and(_io_din_ready_T, _io_din_ready_T_1) @[Spi.scala 79:40]
    io.din.ready <= _io_din_ready_T_2 @[Spi.scala 79:16]
    node _T_8 = eq(busy, UInt<1>("h0")) @[Spi.scala 81:24]
    node _T_9 = and(io.din.valid, _T_8) @[Spi.scala 81:21]
    when _T_9 : @[Spi.scala 81:31]
      shiftReg <= io.din.bits @[Spi.scala 82:14]
      busy <= UInt<1>("h1") @[Spi.scala 83:10]
      bitCounter <= UInt<4>("h8") @[Spi.scala 84:16]
      node _T_10 = and(io.clkshamt.valid, io.clkshamt.ready) @[Spi.scala 87:28]
      when _T_10 : @[Spi.scala 87:50]
        node _sclkCounter_T_5 = add(io.clkshamt.bits, UInt<1>("h1")) @[Spi.scala 88:48]
        node _sclkCounter_T_6 = tail(_sclkCounter_T_5, 1) @[Spi.scala 88:48]
        node _sclkCounter_T_7 = dshl(UInt<1>("h1"), _sclkCounter_T_6) @[Spi.scala 88:27]
        node _sclkCounter_T_8 = sub(_sclkCounter_T_7, UInt<1>("h1")) @[Spi.scala 88:56]
        node _sclkCounter_T_9 = tail(_sclkCounter_T_8, 1) @[Spi.scala 88:56]
        sclkCounter <= _sclkCounter_T_9 @[Spi.scala 88:19]
      else :
        node _sclkCounter_T_10 = add(clkshamt, UInt<1>("h1")) @[Spi.scala 90:40]
        node _sclkCounter_T_11 = tail(_sclkCounter_T_10, 1) @[Spi.scala 90:40]
        node _sclkCounter_T_12 = dshl(UInt<1>("h1"), _sclkCounter_T_11) @[Spi.scala 90:27]
        node _sclkCounter_T_13 = sub(_sclkCounter_T_12, UInt<1>("h1")) @[Spi.scala 90:48]
        node _sclkCounter_T_14 = tail(_sclkCounter_T_13, 1) @[Spi.scala 90:48]
        sclkCounter <= _sclkCounter_T_14 @[Spi.scala 90:19]
    io.dout.bits <= shiftReg @[Spi.scala 94:16]
    io.dout.valid <= outValid @[Spi.scala 95:17]
    node _T_11 = and(io.dout.valid, io.dout.ready) @[Spi.scala 96:22]
    when _T_11 : @[Spi.scala 96:40]
      outValid <= UInt<1>("h0") @[Spi.scala 97:14]
    io.clkshamt.ready <= clkshamtReady @[Spi.scala 100:21]
    node _T_12 = and(io.clkshamt.valid, io.clkshamt.ready) @[Spi.scala 101:26]
    when _T_12 : @[Spi.scala 101:48]
      clkshamtReady <= UInt<1>("h0") @[Spi.scala 102:19]
      clkshamt <= io.clkshamt.bits @[Spi.scala 103:14]
    io.spiMode.ready <= spiModeReady @[Spi.scala 106:20]
    node _T_13 = and(io.spiMode.valid, io.spiMode.ready) @[Spi.scala 107:25]
    when _T_13 : @[Spi.scala 107:46]
      node _cpol_T = bits(io.spiMode.bits, 1, 1) @[Spi.scala 108:28]
      cpol <= _cpol_T @[Spi.scala 108:10]
      node _cpha_T = bits(io.spiMode.bits, 0, 0) @[Spi.scala 109:28]
      cpha <= _cpha_T @[Spi.scala 109:10]
      spiModeReady <= UInt<1>("h0") @[Spi.scala 110:18]
      node _sclk_T_1 = bits(io.spiMode.bits, 1, 1) @[Spi.scala 111:32]
      node _sclk_T_2 = bits(io.spiMode.bits, 1, 1) @[Spi.scala 111:52]
      node _sclk_T_3 = cat(_sclk_T_1, _sclk_T_2) @[Cat.scala 33:92]
      sclk <= _sclk_T_3 @[Spi.scala 111:10]
    node _io_mosi_T = bits(shiftReg, 7, 7) @[Spi.scala 114:22]
    io.mosi <= _io_mosi_T @[Spi.scala 114:11]
    when busy : @[Spi.scala 117:14]
      node _T_14 = eq(bitCounter, UInt<1>("h0")) @[Spi.scala 118:21]
      when _T_14 : @[Spi.scala 118:30]
        isFirstSclk <= UInt<1>("h1") @[Spi.scala 119:19]
        busy <= UInt<1>("h0") @[Spi.scala 120:12]
        outValid <= UInt<1>("h1") @[Spi.scala 121:16]
        clkshamtReady <= UInt<1>("h1") @[Spi.scala 122:21]
        spiModeReady <= UInt<1>("h1") @[Spi.scala 123:20]
      else :
        when mode_1_2 : @[Spi.scala 127:22]
          node _T_15 = and(cpha, isFirstSclk) @[Spi.scala 129:32]
          node _T_16 = eq(_T_15, UInt<1>("h0")) @[Spi.scala 129:25]
          node _T_17 = and(posedge, _T_16) @[Spi.scala 129:22]
          when _T_17 : @[Spi.scala 129:49]
            node _shiftReg_T = shl(shiftReg, 1) @[Spi.scala 131:33]
            node _shiftReg_T_1 = or(_shiftReg_T, misoBuf) @[Spi.scala 131:39]
            shiftReg <= _shiftReg_T_1 @[Spi.scala 131:20]
            node _bitCounter_T = sub(bitCounter, UInt<1>("h1")) @[Spi.scala 132:36]
            node _bitCounter_T_1 = tail(_bitCounter_T, 1) @[Spi.scala 132:36]
            bitCounter <= _bitCounter_T_1 @[Spi.scala 132:22]
          when negedge : @[Spi.scala 134:23]
            misoBuf <= io.miso @[Spi.scala 136:19]
        else :
          node _T_18 = and(cpol, isFirstSclk) @[Spi.scala 140:32]
          node _T_19 = eq(_T_18, UInt<1>("h0")) @[Spi.scala 140:25]
          node _T_20 = and(negedge, _T_19) @[Spi.scala 140:22]
          when _T_20 : @[Spi.scala 140:49]
            node _shiftReg_T_2 = shl(shiftReg, 1) @[Spi.scala 142:33]
            node _shiftReg_T_3 = or(_shiftReg_T_2, misoBuf) @[Spi.scala 142:39]
            shiftReg <= _shiftReg_T_3 @[Spi.scala 142:20]
            node _bitCounter_T_2 = sub(bitCounter, UInt<1>("h1")) @[Spi.scala 143:36]
            node _bitCounter_T_3 = tail(_bitCounter_T_2, 1) @[Spi.scala 143:36]
            bitCounter <= _bitCounter_T_3 @[Spi.scala 143:22]
          when posedge : @[Spi.scala 145:23]
            misoBuf <= io.miso @[Spi.scala 147:19]


  module GeneralPurposeOutput :
    input clock : Clock
    input reset : Reset
    output io : { flip din : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, dout : UInt<8>, pinOut : UInt<8>}

    reg pinOutReg : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Gpio.scala 15:26]
    io.pinOut <= pinOutReg @[Gpio.scala 17:13]
    io.din.ready <= UInt<1>("h1") @[Gpio.scala 18:16]
    io.dout <= pinOutReg @[Gpio.scala 19:11]
    when io.din.valid : @[Gpio.scala 21:23]
      pinOutReg <= io.din.bits @[Gpio.scala 22:15]


  module ClkCounter :
    input clock : Clock
    input reset : Reset
    output io : { clkCount : UInt<64>, clkFreq : UInt<32>}

    reg counter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ClkCounter.scala 12:24]
    node _counter_T = add(counter, UInt<1>("h1")) @[ClkCounter.scala 13:22]
    node _counter_T_1 = tail(_counter_T, 1) @[ClkCounter.scala 13:22]
    counter <= _counter_T_1 @[ClkCounter.scala 13:11]
    io.clkCount <= counter @[ClkCounter.scala 15:15]
    io.clkFreq <= UInt<25>("h134fd90") @[ClkCounter.scala 16:14]

  module IOBus :
    input clock : Clock
    input reset : Reset
    output io : { flip devId : UInt<32>, din : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip dout : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, tx : UInt<1>, flip rx : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>, gpout : UInt<8>}

    inst uartTx of UartTx @[IOBus.scala 24:23]
    uartTx.clock <= clock
    uartTx.reset <= reset
    inst uartRx of UartRx @[IOBus.scala 25:23]
    uartRx.clock <= clock
    uartRx.reset <= reset
    inst spi of Spi @[IOBus.scala 26:23]
    spi.clock <= clock
    spi.reset <= reset
    inst gpout of GeneralPurposeOutput @[IOBus.scala 27:23]
    gpout.clock <= clock
    gpout.reset <= reset
    inst counter of ClkCounter @[IOBus.scala 28:23]
    counter.clock <= clock
    counter.reset <= reset
    wire isUart : UInt<1> @[IOBus.scala 30:26]
    wire isSpiData : UInt<1> @[IOBus.scala 31:26]
    wire isSpiMode : UInt<1> @[IOBus.scala 32:26]
    wire isSpiCshamt : UInt<1> @[IOBus.scala 33:26]
    wire isGpout : UInt<1> @[IOBus.scala 34:26]
    wire isClkCountL : UInt<1> @[IOBus.scala 35:26]
    wire isClkCountU : UInt<1> @[IOBus.scala 36:26]
    wire isClkFreq : UInt<1> @[IOBus.scala 37:26]
    wire isOutInstr : UInt<1> @[IOBus.scala 39:26]
    wire isInInstr : UInt<1> @[IOBus.scala 40:26]
    node _isUart_T = eq(io.devId, UInt<1>("h0")) @[IOBus.scala 42:29]
    isUart <= _isUart_T @[IOBus.scala 42:16]
    node _isSpiData_T = eq(io.devId, UInt<1>("h1")) @[IOBus.scala 43:29]
    isSpiData <= _isSpiData_T @[IOBus.scala 43:16]
    node _isSpiMode_T = eq(io.devId, UInt<2>("h2")) @[IOBus.scala 44:29]
    isSpiMode <= _isSpiMode_T @[IOBus.scala 44:16]
    node _isSpiCshamt_T = eq(io.devId, UInt<2>("h3")) @[IOBus.scala 45:29]
    isSpiCshamt <= _isSpiCshamt_T @[IOBus.scala 45:16]
    node _isGpout_T = eq(io.devId, UInt<3>("h4")) @[IOBus.scala 46:29]
    isGpout <= _isGpout_T @[IOBus.scala 46:16]
    node _isClkCountL_T = eq(io.devId, UInt<13>("h1000")) @[IOBus.scala 47:29]
    isClkCountL <= _isClkCountL_T @[IOBus.scala 47:16]
    node _isClkCountU_T = eq(io.devId, UInt<13>("h1001")) @[IOBus.scala 48:29]
    isClkCountU <= _isClkCountU_T @[IOBus.scala 48:16]
    node _isClkFreq_T = eq(io.devId, UInt<13>("h1002")) @[IOBus.scala 49:29]
    isClkFreq <= _isClkFreq_T @[IOBus.scala 49:16]
    isOutInstr <= io.dout.valid @[IOBus.scala 53:14]
    isInInstr <= io.din.ready @[IOBus.scala 54:14]
    uartRx.io.rx <= io.rx @[IOBus.scala 59:16]
    spi.io.miso <= io.miso @[IOBus.scala 60:16]
    when isInInstr : @[IOBus.scala 62:20]
      node _io_din_valid_T = mux(isSpiData, spi.io.dout.valid, UInt<1>("h1")) @[Mux.scala 101:16]
      node _io_din_valid_T_1 = mux(isUart, uartRx.io.dout.valid, _io_din_valid_T) @[Mux.scala 101:16]
      io.din.valid <= _io_din_valid_T_1 @[IOBus.scala 64:18]
      node _io_din_bits_T = bits(counter.io.clkCount, 31, 0) @[IOBus.scala 75:43]
      node _io_din_bits_T_1 = bits(counter.io.clkCount, 63, 32) @[IOBus.scala 76:43]
      node _io_din_bits_T_2 = mux(isClkFreq, counter.io.clkFreq, UInt<1>("h0")) @[Mux.scala 101:16]
      node _io_din_bits_T_3 = mux(isClkCountU, _io_din_bits_T_1, _io_din_bits_T_2) @[Mux.scala 101:16]
      node _io_din_bits_T_4 = mux(isClkCountL, _io_din_bits_T, _io_din_bits_T_3) @[Mux.scala 101:16]
      node _io_din_bits_T_5 = mux(isGpout, gpout.io.dout, _io_din_bits_T_4) @[Mux.scala 101:16]
      node _io_din_bits_T_6 = mux(isSpiCshamt, spi.io.clkshamtO, _io_din_bits_T_5) @[Mux.scala 101:16]
      node _io_din_bits_T_7 = mux(isSpiMode, spi.io.spiModeO, _io_din_bits_T_6) @[Mux.scala 101:16]
      node _io_din_bits_T_8 = mux(isSpiData, spi.io.dout.bits, _io_din_bits_T_7) @[Mux.scala 101:16]
      node _io_din_bits_T_9 = mux(isUart, uartRx.io.dout.bits, _io_din_bits_T_8) @[Mux.scala 101:16]
      io.din.bits <= _io_din_bits_T_9 @[IOBus.scala 69:17]
      when isUart : @[IOBus.scala 81:19]
        uartRx.io.dout.ready <= io.din.ready @[IOBus.scala 82:28]
      else :
        when isSpiData : @[IOBus.scala 83:29]
          spi.io.dout.ready <= io.din.ready @[IOBus.scala 84:25]
    else :
      io.din.valid <= UInt<1>("h0") @[IOBus.scala 87:18]
      io.din.bits <= UInt<1>("h0") @[IOBus.scala 88:17]
    uartRx.io.dout.ready <= UInt<1>("h0") @[IOBus.scala 93:24]
    spi.io.dout.ready <= UInt<1>("h0") @[IOBus.scala 94:24]
    io.tx <= uartTx.io.tx @[IOBus.scala 100:12]
    io.sclk <= spi.io.sclk @[IOBus.scala 101:12]
    io.mosi <= spi.io.mosi @[IOBus.scala 102:12]
    io.gpout <= gpout.io.pinOut @[IOBus.scala 103:12]
    uartTx.io.din.valid <= UInt<1>("h0") @[IOBus.scala 105:25]
    spi.io.din.valid <= UInt<1>("h0") @[IOBus.scala 106:25]
    spi.io.spiMode.valid <= UInt<1>("h0") @[IOBus.scala 107:25]
    spi.io.clkshamt.valid <= UInt<1>("h0") @[IOBus.scala 108:25]
    gpout.io.din.valid <= UInt<1>("h0") @[IOBus.scala 109:25]
    uartTx.io.din.bits <= UInt<1>("h0") @[IOBus.scala 111:25]
    spi.io.din.bits <= UInt<1>("h0") @[IOBus.scala 112:25]
    spi.io.spiMode.bits <= UInt<1>("h0") @[IOBus.scala 113:25]
    spi.io.clkshamt.bits <= UInt<1>("h0") @[IOBus.scala 114:25]
    gpout.io.din.bits <= UInt<1>("h0") @[IOBus.scala 115:25]
    when isOutInstr : @[IOBus.scala 117:21]
      when isUart : @[IOBus.scala 118:19]
        uartTx.io.din.valid <= io.dout.valid @[IOBus.scala 119:27]
        uartTx.io.din.bits <= io.dout.bits @[IOBus.scala 120:27]
      else :
        when isSpiData : @[IOBus.scala 121:29]
          spi.io.din.valid <= io.dout.valid @[IOBus.scala 122:24]
          spi.io.din.bits <= io.dout.bits @[IOBus.scala 123:24]
        else :
          when isSpiMode : @[IOBus.scala 124:29]
            spi.io.spiMode.valid <= io.dout.valid @[IOBus.scala 125:28]
            spi.io.spiMode.bits <= io.dout.bits @[IOBus.scala 126:28]
          else :
            when isSpiCshamt : @[IOBus.scala 127:31]
              spi.io.clkshamt.valid <= io.dout.valid @[IOBus.scala 128:29]
              spi.io.clkshamt.bits <= io.dout.bits @[IOBus.scala 129:29]
            else :
              when isGpout : @[IOBus.scala 130:27]
                gpout.io.din.valid <= io.dout.valid @[IOBus.scala 131:30]
                gpout.io.din.bits <= io.dout.bits @[IOBus.scala 132:30]
      node _io_dout_ready_T = mux(isGpout, gpout.io.din.ready, UInt<1>("h1")) @[Mux.scala 101:16]
      node _io_dout_ready_T_1 = mux(isSpiCshamt, spi.io.clkshamt.ready, _io_dout_ready_T) @[Mux.scala 101:16]
      node _io_dout_ready_T_2 = mux(isSpiMode, spi.io.spiMode.ready, _io_dout_ready_T_1) @[Mux.scala 101:16]
      node _io_dout_ready_T_3 = mux(isSpiData, spi.io.din.ready, _io_dout_ready_T_2) @[Mux.scala 101:16]
      node _io_dout_ready_T_4 = mux(isUart, uartTx.io.din.ready, _io_dout_ready_T_3) @[Mux.scala 101:16]
      io.dout.ready <= _io_dout_ready_T_4 @[IOBus.scala 135:19]
    else :
      io.dout.ready <= UInt<1>("h0") @[IOBus.scala 143:19]


  module Core :
    input clock : Clock
    input reset : UInt<1>
    output io : { tx : UInt<1>, flip rx : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>, gpout : UInt<8>}

    inst alu of Alu @[Core.scala 18:19]
    alu.clock <= clock
    alu.reset <= reset
    inst ioBus of IOBus @[Core.scala 19:21]
    ioBus.clock <= clock
    ioBus.reset <= reset
    ioBus.io.rx <= io.rx @[Core.scala 21:15]
    io.tx <= ioBus.io.tx @[Core.scala 22:9]
    ioBus.io.miso <= io.miso @[Core.scala 23:17]
    io.sclk <= ioBus.io.sclk @[Core.scala 24:11]
    io.mosi <= ioBus.io.mosi @[Core.scala 25:11]
    io.gpout <= ioBus.io.gpout @[Core.scala 26:12]
    smem imem : UInt<8> [6144] @[Core.scala 28:32]
    smem dmem : UInt<8> [4096] @[Core.scala 30:32]
    reg first_time : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Core.scala 33:31]
    reg pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 34:31]
    reg pc_next_plus_6 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 35:31]
    wire pc_next : UInt<32> @[Core.scala 36:28]
    cmem regfile : UInt<32> [32] @[Core.scala 37:27]
    wire instr : UInt<48> @[Core.scala 39:28]
    wire opcode : UInt<5> @[Core.scala 40:28]
    wire opcode_sub : UInt<3> @[Core.scala 41:28]
    wire rd : UInt<5> @[Core.scala 42:28]
    wire rs1 : UInt<5> @[Core.scala 43:28]
    wire rs1_i : UInt<5> @[Core.scala 44:28]
    wire rs1_s : UInt<5> @[Core.scala 45:28]
    wire rs2 : UInt<5> @[Core.scala 46:28]
    wire rs2_s : UInt<5> @[Core.scala 47:28]
    wire imm : UInt<32> @[Core.scala 48:28]
    wire imm_b : UInt<25> @[Core.scala 49:28]
    wire imm_b_sext : UInt<32> @[Core.scala 50:28]
    wire dmem_raw : UInt<32> @[Core.scala 52:28]
    reg load_ready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 53:31]
    pc <= pc_next @[Core.scala 56:6]
    node _instr_T = add(pc_next, UInt<1>("h0")) @[Core.scala 57:76]
    node _instr_T_1 = tail(_instr_T, 1) @[Core.scala 57:76]
    wire _instr_WIRE : UInt @[Core.scala 57:67]
    _instr_WIRE is invalid @[Core.scala 57:67]
    when UInt<1>("h1") : @[Core.scala 57:67]
      _instr_WIRE <= _instr_T_1 @[Core.scala 57:67]
      node _instr_T_2 = or(_instr_WIRE, UInt<13>("h0")) @[Core.scala 57:67]
      node _instr_T_3 = bits(_instr_T_2, 12, 0) @[Core.scala 57:67]
      read mport instr_MPORT = imem[_instr_T_3], clock @[Core.scala 57:67]
    node _instr_T_4 = add(pc_next, UInt<1>("h1")) @[Core.scala 57:76]
    node _instr_T_5 = tail(_instr_T_4, 1) @[Core.scala 57:76]
    wire _instr_WIRE_1 : UInt @[Core.scala 57:67]
    _instr_WIRE_1 is invalid @[Core.scala 57:67]
    when UInt<1>("h1") : @[Core.scala 57:67]
      _instr_WIRE_1 <= _instr_T_5 @[Core.scala 57:67]
      node _instr_T_6 = or(_instr_WIRE_1, UInt<13>("h0")) @[Core.scala 57:67]
      node _instr_T_7 = bits(_instr_T_6, 12, 0) @[Core.scala 57:67]
      read mport instr_MPORT_1 = imem[_instr_T_7], clock @[Core.scala 57:67]
    node _instr_T_8 = add(pc_next, UInt<2>("h2")) @[Core.scala 57:76]
    node _instr_T_9 = tail(_instr_T_8, 1) @[Core.scala 57:76]
    wire _instr_WIRE_2 : UInt @[Core.scala 57:67]
    _instr_WIRE_2 is invalid @[Core.scala 57:67]
    when UInt<1>("h1") : @[Core.scala 57:67]
      _instr_WIRE_2 <= _instr_T_9 @[Core.scala 57:67]
      node _instr_T_10 = or(_instr_WIRE_2, UInt<13>("h0")) @[Core.scala 57:67]
      node _instr_T_11 = bits(_instr_T_10, 12, 0) @[Core.scala 57:67]
      read mport instr_MPORT_2 = imem[_instr_T_11], clock @[Core.scala 57:67]
    node _instr_T_12 = add(pc_next, UInt<2>("h3")) @[Core.scala 57:76]
    node _instr_T_13 = tail(_instr_T_12, 1) @[Core.scala 57:76]
    wire _instr_WIRE_3 : UInt @[Core.scala 57:67]
    _instr_WIRE_3 is invalid @[Core.scala 57:67]
    when UInt<1>("h1") : @[Core.scala 57:67]
      _instr_WIRE_3 <= _instr_T_13 @[Core.scala 57:67]
      node _instr_T_14 = or(_instr_WIRE_3, UInt<13>("h0")) @[Core.scala 57:67]
      node _instr_T_15 = bits(_instr_T_14, 12, 0) @[Core.scala 57:67]
      read mport instr_MPORT_3 = imem[_instr_T_15], clock @[Core.scala 57:67]
    node _instr_T_16 = add(pc_next, UInt<3>("h4")) @[Core.scala 57:76]
    node _instr_T_17 = tail(_instr_T_16, 1) @[Core.scala 57:76]
    wire _instr_WIRE_4 : UInt @[Core.scala 57:67]
    _instr_WIRE_4 is invalid @[Core.scala 57:67]
    when UInt<1>("h1") : @[Core.scala 57:67]
      _instr_WIRE_4 <= _instr_T_17 @[Core.scala 57:67]
      node _instr_T_18 = or(_instr_WIRE_4, UInt<13>("h0")) @[Core.scala 57:67]
      node _instr_T_19 = bits(_instr_T_18, 12, 0) @[Core.scala 57:67]
      read mport instr_MPORT_4 = imem[_instr_T_19], clock @[Core.scala 57:67]
    node _instr_T_20 = add(pc_next, UInt<3>("h5")) @[Core.scala 57:76]
    node _instr_T_21 = tail(_instr_T_20, 1) @[Core.scala 57:76]
    wire _instr_WIRE_5 : UInt @[Core.scala 57:67]
    _instr_WIRE_5 is invalid @[Core.scala 57:67]
    when UInt<1>("h1") : @[Core.scala 57:67]
      _instr_WIRE_5 <= _instr_T_21 @[Core.scala 57:67]
      node _instr_T_22 = or(_instr_WIRE_5, UInt<13>("h0")) @[Core.scala 57:67]
      node _instr_T_23 = bits(_instr_T_22, 12, 0) @[Core.scala 57:67]
      read mport instr_MPORT_5 = imem[_instr_T_23], clock @[Core.scala 57:67]
    node instr_lo_hi = cat(instr_MPORT_2, instr_MPORT_1) @[Cat.scala 33:92]
    node instr_lo = cat(instr_lo_hi, instr_MPORT) @[Cat.scala 33:92]
    node instr_hi_hi = cat(instr_MPORT_5, instr_MPORT_4) @[Cat.scala 33:92]
    node instr_hi = cat(instr_hi_hi, instr_MPORT_3) @[Cat.scala 33:92]
    node _instr_T_24 = cat(instr_hi, instr_lo) @[Cat.scala 33:92]
    node _instr_T_25 = mux(first_time, UInt<1>("h0"), _instr_T_24) @[Core.scala 57:15]
    instr <= _instr_T_25 @[Core.scala 57:9]
    first_time <= UInt<1>("h0") @[Core.scala 58:14]
    node _pc_next_plus_6_T = add(pc_next, UInt<3>("h6")) @[Core.scala 60:29]
    node _pc_next_plus_6_T_1 = tail(_pc_next_plus_6_T, 1) @[Core.scala 60:29]
    pc_next_plus_6 <= _pc_next_plus_6_T_1 @[Core.scala 60:18]
    node _pc_next_T = eq(opcode, UInt<5>("h3")) @[Core.scala 65:13]
    node _pc_next_T_1 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 65:40]
    node _pc_next_T_2 = and(_pc_next_T, _pc_next_T_1) @[Core.scala 65:26]
    node _pc_next_T_3 = eq(alu.io.zero, UInt<1>("h1")) @[Core.scala 65:68]
    node _pc_next_T_4 = and(_pc_next_T_2, _pc_next_T_3) @[Core.scala 65:53]
    node _pc_next_T_5 = add(pc, imm_b_sext) @[Core.scala 65:88]
    node _pc_next_T_6 = tail(_pc_next_T_5, 1) @[Core.scala 65:88]
    node _pc_next_T_7 = eq(opcode, UInt<5>("h3")) @[Core.scala 66:13]
    node _pc_next_T_8 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 66:40]
    node _pc_next_T_9 = and(_pc_next_T_7, _pc_next_T_8) @[Core.scala 66:26]
    node _pc_next_T_10 = eq(alu.io.zero, UInt<1>("h0")) @[Core.scala 66:68]
    node _pc_next_T_11 = and(_pc_next_T_9, _pc_next_T_10) @[Core.scala 66:53]
    node _pc_next_T_12 = add(pc, imm_b_sext) @[Core.scala 66:88]
    node _pc_next_T_13 = tail(_pc_next_T_12, 1) @[Core.scala 66:88]
    node _pc_next_T_14 = eq(opcode, UInt<5>("h3")) @[Core.scala 67:13]
    node _pc_next_T_15 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 67:40]
    node _pc_next_T_16 = and(_pc_next_T_14, _pc_next_T_15) @[Core.scala 67:26]
    node _pc_next_T_17 = bits(alu.io.out, 31, 31) @[Core.scala 67:67]
    node _pc_next_T_18 = eq(_pc_next_T_17, UInt<1>("h1")) @[Core.scala 67:72]
    node _pc_next_T_19 = eq(alu.io.zero, UInt<1>("h1")) @[Core.scala 67:100]
    node _pc_next_T_20 = or(_pc_next_T_18, _pc_next_T_19) @[Core.scala 67:85]
    node _pc_next_T_21 = and(_pc_next_T_16, _pc_next_T_20) @[Core.scala 67:53]
    node _pc_next_T_22 = add(pc, imm_b_sext) @[Core.scala 67:120]
    node _pc_next_T_23 = tail(_pc_next_T_22, 1) @[Core.scala 67:120]
    node _pc_next_T_24 = eq(opcode, UInt<5>("h3")) @[Core.scala 68:13]
    node _pc_next_T_25 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 68:40]
    node _pc_next_T_26 = and(_pc_next_T_24, _pc_next_T_25) @[Core.scala 68:26]
    node _pc_next_T_27 = bits(alu.io.out, 31, 31) @[Core.scala 68:66]
    node _pc_next_T_28 = eq(_pc_next_T_27, UInt<1>("h1")) @[Core.scala 68:71]
    node _pc_next_T_29 = and(_pc_next_T_26, _pc_next_T_28) @[Core.scala 68:53]
    node _pc_next_T_30 = add(pc, imm_b_sext) @[Core.scala 68:93]
    node _pc_next_T_31 = tail(_pc_next_T_30, 1) @[Core.scala 68:93]
    node _pc_next_T_32 = eq(opcode, UInt<5>("h3")) @[Core.scala 69:13]
    node _pc_next_T_33 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 69:40]
    node _pc_next_T_34 = and(_pc_next_T_32, _pc_next_T_33) @[Core.scala 69:26]
    node _pc_next_T_35 = eq(opcode, UInt<5>("h4")) @[Core.scala 71:13]
    node _pc_next_T_36 = eq(load_ready, UInt<1>("h0")) @[Core.scala 71:29]
    node _pc_next_T_37 = and(_pc_next_T_35, _pc_next_T_36) @[Core.scala 71:26]
    node _pc_next_T_38 = eq(opcode, UInt<5>("h6")) @[Core.scala 73:13]
    node _pc_next_T_39 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 73:40]
    node _pc_next_T_40 = and(_pc_next_T_38, _pc_next_T_39) @[Core.scala 73:26]
    node _pc_next_T_41 = eq(ioBus.io.din.valid, UInt<1>("h0")) @[Core.scala 73:56]
    node _pc_next_T_42 = and(_pc_next_T_40, _pc_next_T_41) @[Core.scala 73:53]
    node _pc_next_T_43 = eq(opcode, UInt<5>("h6")) @[Core.scala 74:13]
    node _pc_next_T_44 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 74:40]
    node _pc_next_T_45 = and(_pc_next_T_43, _pc_next_T_44) @[Core.scala 74:26]
    node _pc_next_T_46 = eq(ioBus.io.dout.ready, UInt<1>("h0")) @[Core.scala 74:56]
    node _pc_next_T_47 = and(_pc_next_T_45, _pc_next_T_46) @[Core.scala 74:53]
    node _pc_next_T_48 = mux(_pc_next_T_47, pc, pc_next_plus_6) @[Mux.scala 101:16]
    node _pc_next_T_49 = mux(_pc_next_T_42, pc, _pc_next_T_48) @[Mux.scala 101:16]
    node _pc_next_T_50 = mux(_pc_next_T_37, pc, _pc_next_T_49) @[Mux.scala 101:16]
    node _pc_next_T_51 = mux(_pc_next_T_34, alu.io.out, _pc_next_T_50) @[Mux.scala 101:16]
    node _pc_next_T_52 = mux(_pc_next_T_29, _pc_next_T_31, _pc_next_T_51) @[Mux.scala 101:16]
    node _pc_next_T_53 = mux(_pc_next_T_21, _pc_next_T_23, _pc_next_T_52) @[Mux.scala 101:16]
    node _pc_next_T_54 = mux(_pc_next_T_11, _pc_next_T_13, _pc_next_T_53) @[Mux.scala 101:16]
    node _pc_next_T_55 = mux(_pc_next_T_4, _pc_next_T_6, _pc_next_T_54) @[Mux.scala 101:16]
    pc_next <= _pc_next_T_55 @[Core.scala 64:11]
    wire command : UInt<8> @[Core.scala 79:24]
    node _opcode_T = bits(instr, 4, 0) @[Core.scala 81:22]
    opcode <= _opcode_T @[Core.scala 81:14]
    node _opcode_sub_T = bits(instr, 7, 5) @[Core.scala 82:22]
    opcode_sub <= _opcode_sub_T @[Core.scala 82:14]
    node _rd_T = bits(instr, 12, 8) @[Core.scala 83:22]
    rd <= _rd_T @[Core.scala 83:14]
    node _rs1_T = bits(instr, 17, 13) @[Core.scala 84:22]
    rs1 <= _rs1_T @[Core.scala 84:14]
    node _rs1_i_T = bits(instr, 15, 13) @[Core.scala 85:36]
    node _rs1_i_T_1 = cat(UInt<2>("h0"), _rs1_i_T) @[Cat.scala 33:92]
    rs1_i <= _rs1_i_T_1 @[Core.scala 85:14]
    node _rs1_s_T = bits(instr, 15, 13) @[Core.scala 86:36]
    node _rs1_s_T_1 = cat(UInt<2>("h0"), _rs1_s_T) @[Cat.scala 33:92]
    rs1_s <= _rs1_s_T_1 @[Core.scala 86:14]
    node _rs2_T = bits(instr, 22, 18) @[Core.scala 87:22]
    rs2 <= _rs2_T @[Core.scala 87:14]
    node _rs2_s_T = bits(instr, 12, 8) @[Core.scala 88:22]
    rs2_s <= _rs2_s_T @[Core.scala 88:14]
    node _imm_T = bits(instr, 47, 16) @[Core.scala 89:22]
    imm <= _imm_T @[Core.scala 89:14]
    node _imm_b_T = bits(instr, 47, 23) @[Core.scala 90:22]
    imm_b <= _imm_b_T @[Core.scala 90:14]
    node _imm_b_sext_T = bits(imm_b, 24, 24) @[Core.scala 91:34]
    node _imm_b_sext_T_1 = bits(_imm_b_sext_T, 0, 0) @[Bitwise.scala 77:15]
    node _imm_b_sext_T_2 = mux(_imm_b_sext_T_1, UInt<7>("h7f"), UInt<7>("h0")) @[Bitwise.scala 77:12]
    node _imm_b_sext_T_3 = cat(_imm_b_sext_T_2, imm_b) @[Cat.scala 33:92]
    imm_b_sext <= _imm_b_sext_T_3 @[Core.scala 91:14]
    node _command_T = eq(opcode, UInt<5>("h1")) @[Core.scala 96:13]
    node _command_T_1 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 96:40]
    node _command_T_2 = and(_command_T, _command_T_1) @[Core.scala 96:26]
    node _command_T_3 = eq(opcode, UInt<5>("h1")) @[Core.scala 97:13]
    node _command_T_4 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 97:40]
    node _command_T_5 = and(_command_T_3, _command_T_4) @[Core.scala 97:26]
    node _command_T_6 = eq(opcode, UInt<5>("h2")) @[Core.scala 99:13]
    node _command_T_7 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 99:40]
    node _command_T_8 = and(_command_T_6, _command_T_7) @[Core.scala 99:26]
    node _command_T_9 = eq(opcode, UInt<5>("h2")) @[Core.scala 100:13]
    node _command_T_10 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 100:40]
    node _command_T_11 = and(_command_T_9, _command_T_10) @[Core.scala 100:26]
    node _command_T_12 = eq(opcode, UInt<5>("h3")) @[Core.scala 102:13]
    node _command_T_13 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 102:40]
    node _command_T_14 = and(_command_T_12, _command_T_13) @[Core.scala 102:26]
    node _command_T_15 = eq(opcode, UInt<5>("h3")) @[Core.scala 103:13]
    node _command_T_16 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 103:40]
    node _command_T_17 = and(_command_T_15, _command_T_16) @[Core.scala 103:26]
    node _command_T_18 = eq(opcode, UInt<5>("h3")) @[Core.scala 104:13]
    node _command_T_19 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 104:40]
    node _command_T_20 = and(_command_T_18, _command_T_19) @[Core.scala 104:26]
    node _command_T_21 = eq(opcode, UInt<5>("h3")) @[Core.scala 105:13]
    node _command_T_22 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 105:40]
    node _command_T_23 = and(_command_T_21, _command_T_22) @[Core.scala 105:26]
    node _command_T_24 = eq(opcode, UInt<5>("h3")) @[Core.scala 106:13]
    node _command_T_25 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 106:40]
    node _command_T_26 = and(_command_T_24, _command_T_25) @[Core.scala 106:26]
    node _command_T_27 = eq(opcode, UInt<5>("h4")) @[Core.scala 108:13]
    node _command_T_28 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 108:40]
    node _command_T_29 = and(_command_T_27, _command_T_28) @[Core.scala 108:26]
    node _command_T_30 = eq(opcode, UInt<5>("h4")) @[Core.scala 109:13]
    node _command_T_31 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 109:40]
    node _command_T_32 = and(_command_T_30, _command_T_31) @[Core.scala 109:26]
    node _command_T_33 = eq(opcode, UInt<5>("h4")) @[Core.scala 110:13]
    node _command_T_34 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 110:40]
    node _command_T_35 = and(_command_T_33, _command_T_34) @[Core.scala 110:26]
    node _command_T_36 = eq(opcode, UInt<5>("h4")) @[Core.scala 111:13]
    node _command_T_37 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 111:40]
    node _command_T_38 = and(_command_T_36, _command_T_37) @[Core.scala 111:26]
    node _command_T_39 = eq(opcode, UInt<5>("h4")) @[Core.scala 112:13]
    node _command_T_40 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 112:40]
    node _command_T_41 = and(_command_T_39, _command_T_40) @[Core.scala 112:26]
    node _command_T_42 = eq(opcode, UInt<5>("h5")) @[Core.scala 114:13]
    node _command_T_43 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 114:40]
    node _command_T_44 = and(_command_T_42, _command_T_43) @[Core.scala 114:26]
    node _command_T_45 = eq(opcode, UInt<5>("h5")) @[Core.scala 115:13]
    node _command_T_46 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 115:40]
    node _command_T_47 = and(_command_T_45, _command_T_46) @[Core.scala 115:26]
    node _command_T_48 = eq(opcode, UInt<5>("h5")) @[Core.scala 116:13]
    node _command_T_49 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 116:40]
    node _command_T_50 = and(_command_T_48, _command_T_49) @[Core.scala 116:26]
    node _command_T_51 = eq(opcode, UInt<5>("h6")) @[Core.scala 118:13]
    node _command_T_52 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 118:40]
    node _command_T_53 = and(_command_T_51, _command_T_52) @[Core.scala 118:26]
    node _command_T_54 = eq(opcode, UInt<5>("h6")) @[Core.scala 119:13]
    node _command_T_55 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 119:40]
    node _command_T_56 = and(_command_T_54, _command_T_55) @[Core.scala 119:26]
    node _command_T_57 = eq(opcode, UInt<5>("h7")) @[Core.scala 121:13]
    node _command_T_58 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 121:40]
    node _command_T_59 = and(_command_T_57, _command_T_58) @[Core.scala 121:26]
    node _command_T_60 = eq(opcode, UInt<5>("h7")) @[Core.scala 122:13]
    node _command_T_61 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 122:40]
    node _command_T_62 = and(_command_T_60, _command_T_61) @[Core.scala 122:26]
    node _command_T_63 = eq(opcode, UInt<5>("h7")) @[Core.scala 123:13]
    node _command_T_64 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 123:40]
    node _command_T_65 = and(_command_T_63, _command_T_64) @[Core.scala 123:26]
    node _command_T_66 = eq(opcode, UInt<5>("h7")) @[Core.scala 124:13]
    node _command_T_67 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 124:40]
    node _command_T_68 = and(_command_T_66, _command_T_67) @[Core.scala 124:26]
    node _command_T_69 = eq(opcode, UInt<5>("h7")) @[Core.scala 125:13]
    node _command_T_70 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 125:40]
    node _command_T_71 = and(_command_T_69, _command_T_70) @[Core.scala 125:26]
    node _command_T_72 = eq(opcode, UInt<5>("h7")) @[Core.scala 126:13]
    node _command_T_73 = eq(opcode_sub, UInt<3>("h5")) @[Core.scala 126:40]
    node _command_T_74 = and(_command_T_72, _command_T_73) @[Core.scala 126:26]
    node _command_T_75 = eq(opcode, UInt<5>("h8")) @[Core.scala 128:13]
    node _command_T_76 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 128:40]
    node _command_T_77 = and(_command_T_75, _command_T_76) @[Core.scala 128:26]
    node _command_T_78 = eq(opcode, UInt<5>("h8")) @[Core.scala 129:13]
    node _command_T_79 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 129:40]
    node _command_T_80 = and(_command_T_78, _command_T_79) @[Core.scala 129:26]
    node _command_T_81 = eq(opcode, UInt<5>("h8")) @[Core.scala 130:13]
    node _command_T_82 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 130:40]
    node _command_T_83 = and(_command_T_81, _command_T_82) @[Core.scala 130:26]
    node _command_T_84 = eq(opcode, UInt<5>("h8")) @[Core.scala 131:13]
    node _command_T_85 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 131:40]
    node _command_T_86 = and(_command_T_84, _command_T_85) @[Core.scala 131:26]
    node _command_T_87 = eq(opcode, UInt<5>("h8")) @[Core.scala 132:13]
    node _command_T_88 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 132:40]
    node _command_T_89 = and(_command_T_87, _command_T_88) @[Core.scala 132:26]
    node _command_T_90 = eq(opcode, UInt<5>("h8")) @[Core.scala 133:13]
    node _command_T_91 = eq(opcode_sub, UInt<3>("h5")) @[Core.scala 133:40]
    node _command_T_92 = and(_command_T_90, _command_T_91) @[Core.scala 133:26]
    node _command_T_93 = mux(_command_T_92, UInt<8>("h8"), UInt<8>("h0")) @[Mux.scala 101:16]
    node _command_T_94 = mux(_command_T_89, UInt<8>("h7"), _command_T_93) @[Mux.scala 101:16]
    node _command_T_95 = mux(_command_T_86, UInt<8>("h6"), _command_T_94) @[Mux.scala 101:16]
    node _command_T_96 = mux(_command_T_83, UInt<8>("h5"), _command_T_95) @[Mux.scala 101:16]
    node _command_T_97 = mux(_command_T_80, UInt<8>("h4"), _command_T_96) @[Mux.scala 101:16]
    node _command_T_98 = mux(_command_T_77, UInt<8>("h3"), _command_T_97) @[Mux.scala 101:16]
    node _command_T_99 = mux(_command_T_74, UInt<8>("h8"), _command_T_98) @[Mux.scala 101:16]
    node _command_T_100 = mux(_command_T_71, UInt<8>("h7"), _command_T_99) @[Mux.scala 101:16]
    node _command_T_101 = mux(_command_T_68, UInt<8>("h6"), _command_T_100) @[Mux.scala 101:16]
    node _command_T_102 = mux(_command_T_65, UInt<8>("h5"), _command_T_101) @[Mux.scala 101:16]
    node _command_T_103 = mux(_command_T_62, UInt<8>("h4"), _command_T_102) @[Mux.scala 101:16]
    node _command_T_104 = mux(_command_T_59, UInt<8>("h3"), _command_T_103) @[Mux.scala 101:16]
    node _command_T_105 = mux(_command_T_56, UInt<8>("h1"), _command_T_104) @[Mux.scala 101:16]
    node _command_T_106 = mux(_command_T_53, UInt<8>("h1"), _command_T_105) @[Mux.scala 101:16]
    node _command_T_107 = mux(_command_T_50, UInt<8>("h1"), _command_T_106) @[Mux.scala 101:16]
    node _command_T_108 = mux(_command_T_47, UInt<8>("h1"), _command_T_107) @[Mux.scala 101:16]
    node _command_T_109 = mux(_command_T_44, UInt<8>("h1"), _command_T_108) @[Mux.scala 101:16]
    node _command_T_110 = mux(_command_T_41, UInt<8>("h1"), _command_T_109) @[Mux.scala 101:16]
    node _command_T_111 = mux(_command_T_38, UInt<8>("h1"), _command_T_110) @[Mux.scala 101:16]
    node _command_T_112 = mux(_command_T_35, UInt<8>("h1"), _command_T_111) @[Mux.scala 101:16]
    node _command_T_113 = mux(_command_T_32, UInt<8>("h1"), _command_T_112) @[Mux.scala 101:16]
    node _command_T_114 = mux(_command_T_29, UInt<8>("h1"), _command_T_113) @[Mux.scala 101:16]
    node _command_T_115 = mux(_command_T_26, UInt<8>("h1"), _command_T_114) @[Mux.scala 101:16]
    node _command_T_116 = mux(_command_T_23, UInt<8>("h2"), _command_T_115) @[Mux.scala 101:16]
    node _command_T_117 = mux(_command_T_20, UInt<8>("h2"), _command_T_116) @[Mux.scala 101:16]
    node _command_T_118 = mux(_command_T_17, UInt<8>("h2"), _command_T_117) @[Mux.scala 101:16]
    node _command_T_119 = mux(_command_T_14, UInt<8>("h2"), _command_T_118) @[Mux.scala 101:16]
    node _command_T_120 = mux(_command_T_11, UInt<8>("h2"), _command_T_119) @[Mux.scala 101:16]
    node _command_T_121 = mux(_command_T_8, UInt<8>("h1"), _command_T_120) @[Mux.scala 101:16]
    node _command_T_122 = mux(_command_T_5, UInt<8>("h2"), _command_T_121) @[Mux.scala 101:16]
    node _command_T_123 = mux(_command_T_2, UInt<8>("h1"), _command_T_122) @[Mux.scala 101:16]
    command <= _command_T_123 @[Core.scala 94:11]
    alu.io.command <= command @[Core.scala 137:18]
    infer mport alu_io_a_MPORT = regfile[rs1], clock @[Core.scala 138:36]
    node _alu_io_a_T = eq(opcode, UInt<5>("h2")) @[Core.scala 141:13]
    infer mport alu_io_a_MPORT_1 = regfile[rs1_i], clock @[Core.scala 141:38]
    node _alu_io_a_T_1 = eq(opcode, UInt<5>("h3")) @[Core.scala 144:13]
    node _alu_io_a_T_2 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 144:40]
    node _alu_io_a_T_3 = and(_alu_io_a_T_1, _alu_io_a_T_2) @[Core.scala 144:26]
    infer mport alu_io_a_MPORT_2 = regfile[rs1_i], clock @[Core.scala 144:65]
    node _alu_io_a_T_4 = eq(opcode, UInt<5>("h4")) @[Core.scala 147:13]
    infer mport alu_io_a_MPORT_3 = regfile[rs1_i], clock @[Core.scala 147:38]
    node _alu_io_a_T_5 = eq(opcode, UInt<5>("h5")) @[Core.scala 150:13]
    infer mport alu_io_a_MPORT_4 = regfile[rs1_s], clock @[Core.scala 150:38]
    node _alu_io_a_T_6 = eq(opcode, UInt<5>("h6")) @[Core.scala 153:13]
    node _alu_io_a_T_7 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 153:40]
    node _alu_io_a_T_8 = and(_alu_io_a_T_6, _alu_io_a_T_7) @[Core.scala 153:26]
    infer mport alu_io_a_MPORT_5 = regfile[rs1_i], clock @[Core.scala 153:65]
    node _alu_io_a_T_9 = eq(opcode, UInt<5>("h6")) @[Core.scala 155:13]
    node _alu_io_a_T_10 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 155:40]
    node _alu_io_a_T_11 = and(_alu_io_a_T_9, _alu_io_a_T_10) @[Core.scala 155:26]
    infer mport alu_io_a_MPORT_6 = regfile[rs1_s], clock @[Core.scala 155:65]
    node _alu_io_a_T_12 = eq(opcode, UInt<5>("h8")) @[Core.scala 158:13]
    infer mport alu_io_a_MPORT_7 = regfile[rs1_i], clock @[Core.scala 158:38]
    node _alu_io_a_T_13 = mux(_alu_io_a_T_12, alu_io_a_MPORT_7, alu_io_a_MPORT) @[Mux.scala 101:16]
    node _alu_io_a_T_14 = mux(_alu_io_a_T_11, alu_io_a_MPORT_6, _alu_io_a_T_13) @[Mux.scala 101:16]
    node _alu_io_a_T_15 = mux(_alu_io_a_T_8, alu_io_a_MPORT_5, _alu_io_a_T_14) @[Mux.scala 101:16]
    node _alu_io_a_T_16 = mux(_alu_io_a_T_5, alu_io_a_MPORT_4, _alu_io_a_T_15) @[Mux.scala 101:16]
    node _alu_io_a_T_17 = mux(_alu_io_a_T_4, alu_io_a_MPORT_3, _alu_io_a_T_16) @[Mux.scala 101:16]
    node _alu_io_a_T_18 = mux(_alu_io_a_T_3, alu_io_a_MPORT_2, _alu_io_a_T_17) @[Mux.scala 101:16]
    node _alu_io_a_T_19 = mux(_alu_io_a_T, alu_io_a_MPORT_1, _alu_io_a_T_18) @[Mux.scala 101:16]
    alu.io.a <= _alu_io_a_T_19 @[Core.scala 138:18]
    node _alu_io_b_T = eq(opcode, UInt<5>("h1")) @[Core.scala 162:13]
    infer mport alu_io_b_MPORT = regfile[rs2], clock @[Core.scala 162:38]
    node _alu_io_b_T_1 = eq(opcode, UInt<5>("h2")) @[Core.scala 165:13]
    node _alu_io_b_T_2 = eq(opcode, UInt<5>("h3")) @[Core.scala 168:13]
    node _alu_io_b_T_3 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 168:40]
    node _alu_io_b_T_4 = and(_alu_io_b_T_2, _alu_io_b_T_3) @[Core.scala 168:26]
    infer mport alu_io_b_MPORT_1 = regfile[rs2], clock @[Core.scala 168:65]
    node _alu_io_b_T_5 = eq(opcode, UInt<5>("h3")) @[Core.scala 170:13]
    node _alu_io_b_T_6 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 170:40]
    node _alu_io_b_T_7 = and(_alu_io_b_T_5, _alu_io_b_T_6) @[Core.scala 170:26]
    infer mport alu_io_b_MPORT_2 = regfile[rs2], clock @[Core.scala 170:65]
    node _alu_io_b_T_8 = eq(opcode, UInt<5>("h3")) @[Core.scala 172:13]
    node _alu_io_b_T_9 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 172:40]
    node _alu_io_b_T_10 = and(_alu_io_b_T_8, _alu_io_b_T_9) @[Core.scala 172:26]
    infer mport alu_io_b_MPORT_3 = regfile[rs2], clock @[Core.scala 172:65]
    node _alu_io_b_T_11 = eq(opcode, UInt<5>("h3")) @[Core.scala 174:13]
    node _alu_io_b_T_12 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 174:40]
    node _alu_io_b_T_13 = and(_alu_io_b_T_11, _alu_io_b_T_12) @[Core.scala 174:26]
    infer mport alu_io_b_MPORT_4 = regfile[rs2], clock @[Core.scala 174:65]
    node _alu_io_b_T_14 = eq(opcode, UInt<5>("h3")) @[Core.scala 176:13]
    node _alu_io_b_T_15 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 176:40]
    node _alu_io_b_T_16 = and(_alu_io_b_T_14, _alu_io_b_T_15) @[Core.scala 176:26]
    node _alu_io_b_T_17 = eq(opcode, UInt<5>("h4")) @[Core.scala 179:13]
    node _alu_io_b_T_18 = eq(opcode, UInt<5>("h5")) @[Core.scala 182:13]
    node _alu_io_b_T_19 = eq(opcode, UInt<5>("h6")) @[Core.scala 185:13]
    node _alu_io_b_T_20 = eq(opcode, UInt<5>("h7")) @[Core.scala 188:13]
    infer mport alu_io_b_MPORT_5 = regfile[rs2], clock @[Core.scala 188:38]
    node _alu_io_b_T_21 = eq(opcode, UInt<5>("h8")) @[Core.scala 191:13]
    node _alu_io_b_T_22 = mux(_alu_io_b_T_21, imm, UInt<32>("h0")) @[Mux.scala 101:16]
    node _alu_io_b_T_23 = mux(_alu_io_b_T_20, alu_io_b_MPORT_5, _alu_io_b_T_22) @[Mux.scala 101:16]
    node _alu_io_b_T_24 = mux(_alu_io_b_T_19, imm, _alu_io_b_T_23) @[Mux.scala 101:16]
    node _alu_io_b_T_25 = mux(_alu_io_b_T_18, imm, _alu_io_b_T_24) @[Mux.scala 101:16]
    node _alu_io_b_T_26 = mux(_alu_io_b_T_17, imm, _alu_io_b_T_25) @[Mux.scala 101:16]
    node _alu_io_b_T_27 = mux(_alu_io_b_T_16, imm, _alu_io_b_T_26) @[Mux.scala 101:16]
    node _alu_io_b_T_28 = mux(_alu_io_b_T_13, alu_io_b_MPORT_4, _alu_io_b_T_27) @[Mux.scala 101:16]
    node _alu_io_b_T_29 = mux(_alu_io_b_T_10, alu_io_b_MPORT_3, _alu_io_b_T_28) @[Mux.scala 101:16]
    node _alu_io_b_T_30 = mux(_alu_io_b_T_7, alu_io_b_MPORT_2, _alu_io_b_T_29) @[Mux.scala 101:16]
    node _alu_io_b_T_31 = mux(_alu_io_b_T_4, alu_io_b_MPORT_1, _alu_io_b_T_30) @[Mux.scala 101:16]
    node _alu_io_b_T_32 = mux(_alu_io_b_T_1, imm, _alu_io_b_T_31) @[Mux.scala 101:16]
    node _alu_io_b_T_33 = mux(_alu_io_b_T, alu_io_b_MPORT, _alu_io_b_T_32) @[Mux.scala 101:16]
    alu.io.b <= _alu_io_b_T_33 @[Core.scala 160:18]
    node _T = eq(opcode, UInt<5>("h5")) @[Core.scala 194:16]
    node _T_1 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 194:45]
    node _T_2 = and(_T, _T_1) @[Core.scala 194:30]
    when _T_2 : @[Core.scala 194:60]
      node _T_3 = add(alu.io.out, UInt<1>("h0")) @[Core.scala 196:23]
      node _T_4 = tail(_T_3, 1) @[Core.scala 196:23]
      node _T_5 = bits(_T_4, 11, 0) @[Core.scala 196:11]
      infer mport MPORT = dmem[_T_5], clock @[Core.scala 196:11]
      infer mport MPORT_1 = regfile[rs2_s], clock @[Core.scala 196:40]
      node _T_6 = bits(MPORT_1, 7, 0) @[Core.scala 196:47]
      MPORT <= _T_6 @[Core.scala 196:30]
      node _T_7 = add(alu.io.out, UInt<1>("h1")) @[Core.scala 196:23]
      node _T_8 = tail(_T_7, 1) @[Core.scala 196:23]
      node _T_9 = bits(_T_8, 11, 0) @[Core.scala 196:11]
      infer mport MPORT_2 = dmem[_T_9], clock @[Core.scala 196:11]
      infer mport MPORT_3 = regfile[rs2_s], clock @[Core.scala 196:40]
      node _T_10 = bits(MPORT_3, 15, 8) @[Core.scala 196:47]
      MPORT_2 <= _T_10 @[Core.scala 196:30]
      node _T_11 = add(alu.io.out, UInt<2>("h2")) @[Core.scala 196:23]
      node _T_12 = tail(_T_11, 1) @[Core.scala 196:23]
      node _T_13 = bits(_T_12, 11, 0) @[Core.scala 196:11]
      infer mport MPORT_4 = dmem[_T_13], clock @[Core.scala 196:11]
      infer mport MPORT_5 = regfile[rs2_s], clock @[Core.scala 196:40]
      node _T_14 = bits(MPORT_5, 23, 16) @[Core.scala 196:47]
      MPORT_4 <= _T_14 @[Core.scala 196:30]
      node _T_15 = add(alu.io.out, UInt<2>("h3")) @[Core.scala 196:23]
      node _T_16 = tail(_T_15, 1) @[Core.scala 196:23]
      node _T_17 = bits(_T_16, 11, 0) @[Core.scala 196:11]
      infer mport MPORT_6 = dmem[_T_17], clock @[Core.scala 196:11]
      infer mport MPORT_7 = regfile[rs2_s], clock @[Core.scala 196:40]
      node _T_18 = bits(MPORT_7, 31, 24) @[Core.scala 196:47]
      MPORT_6 <= _T_18 @[Core.scala 196:30]
    else :
      node _T_19 = eq(opcode, UInt<5>("h5")) @[Core.scala 198:22]
      node _T_20 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 198:51]
      node _T_21 = and(_T_19, _T_20) @[Core.scala 198:36]
      when _T_21 : @[Core.scala 198:66]
        node _T_22 = add(alu.io.out, UInt<1>("h0")) @[Core.scala 200:23]
        node _T_23 = tail(_T_22, 1) @[Core.scala 200:23]
        node _T_24 = bits(_T_23, 11, 0) @[Core.scala 200:11]
        infer mport MPORT_8 = dmem[_T_24], clock @[Core.scala 200:11]
        infer mport MPORT_9 = regfile[rs2_s], clock @[Core.scala 200:40]
        node _T_25 = bits(MPORT_9, 7, 0) @[Core.scala 200:47]
        MPORT_8 <= _T_25 @[Core.scala 200:30]
        node _T_26 = add(alu.io.out, UInt<1>("h1")) @[Core.scala 200:23]
        node _T_27 = tail(_T_26, 1) @[Core.scala 200:23]
        node _T_28 = bits(_T_27, 11, 0) @[Core.scala 200:11]
        infer mport MPORT_10 = dmem[_T_28], clock @[Core.scala 200:11]
        infer mport MPORT_11 = regfile[rs2_s], clock @[Core.scala 200:40]
        node _T_29 = bits(MPORT_11, 15, 8) @[Core.scala 200:47]
        MPORT_10 <= _T_29 @[Core.scala 200:30]
      else :
        node _T_30 = eq(opcode, UInt<5>("h5")) @[Core.scala 202:22]
        node _T_31 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 202:51]
        node _T_32 = and(_T_30, _T_31) @[Core.scala 202:36]
        when _T_32 : @[Core.scala 202:66]
          node _T_33 = bits(alu.io.out, 11, 0) @[Core.scala 203:9]
          infer mport MPORT_12 = dmem[_T_33], clock @[Core.scala 203:9]
          infer mport MPORT_13 = regfile[rs2_s], clock @[Core.scala 203:32]
          node _T_34 = bits(MPORT_13, 7, 0) @[Core.scala 203:39]
          MPORT_12 <= _T_34 @[Core.scala 203:22]
    node _dmem_raw_T = add(alu.io.out, UInt<1>("h0")) @[Core.scala 207:47]
    node _dmem_raw_T_1 = tail(_dmem_raw_T, 1) @[Core.scala 207:47]
    wire _dmem_raw_WIRE : UInt @[Core.scala 207:35]
    _dmem_raw_WIRE is invalid @[Core.scala 207:35]
    when UInt<1>("h1") : @[Core.scala 207:35]
      _dmem_raw_WIRE <= _dmem_raw_T_1 @[Core.scala 207:35]
      node _dmem_raw_T_2 = or(_dmem_raw_WIRE, UInt<12>("h0")) @[Core.scala 207:35]
      node _dmem_raw_T_3 = bits(_dmem_raw_T_2, 11, 0) @[Core.scala 207:35]
      read mport dmem_raw_MPORT = dmem[_dmem_raw_T_3], clock @[Core.scala 207:35]
    node _dmem_raw_T_4 = add(alu.io.out, UInt<1>("h1")) @[Core.scala 207:47]
    node _dmem_raw_T_5 = tail(_dmem_raw_T_4, 1) @[Core.scala 207:47]
    wire _dmem_raw_WIRE_1 : UInt @[Core.scala 207:35]
    _dmem_raw_WIRE_1 is invalid @[Core.scala 207:35]
    when UInt<1>("h1") : @[Core.scala 207:35]
      _dmem_raw_WIRE_1 <= _dmem_raw_T_5 @[Core.scala 207:35]
      node _dmem_raw_T_6 = or(_dmem_raw_WIRE_1, UInt<12>("h0")) @[Core.scala 207:35]
      node _dmem_raw_T_7 = bits(_dmem_raw_T_6, 11, 0) @[Core.scala 207:35]
      read mport dmem_raw_MPORT_1 = dmem[_dmem_raw_T_7], clock @[Core.scala 207:35]
    node _dmem_raw_T_8 = add(alu.io.out, UInt<2>("h2")) @[Core.scala 207:47]
    node _dmem_raw_T_9 = tail(_dmem_raw_T_8, 1) @[Core.scala 207:47]
    wire _dmem_raw_WIRE_2 : UInt @[Core.scala 207:35]
    _dmem_raw_WIRE_2 is invalid @[Core.scala 207:35]
    when UInt<1>("h1") : @[Core.scala 207:35]
      _dmem_raw_WIRE_2 <= _dmem_raw_T_9 @[Core.scala 207:35]
      node _dmem_raw_T_10 = or(_dmem_raw_WIRE_2, UInt<12>("h0")) @[Core.scala 207:35]
      node _dmem_raw_T_11 = bits(_dmem_raw_T_10, 11, 0) @[Core.scala 207:35]
      read mport dmem_raw_MPORT_2 = dmem[_dmem_raw_T_11], clock @[Core.scala 207:35]
    node _dmem_raw_T_12 = add(alu.io.out, UInt<2>("h3")) @[Core.scala 207:47]
    node _dmem_raw_T_13 = tail(_dmem_raw_T_12, 1) @[Core.scala 207:47]
    wire _dmem_raw_WIRE_3 : UInt @[Core.scala 207:35]
    _dmem_raw_WIRE_3 is invalid @[Core.scala 207:35]
    when UInt<1>("h1") : @[Core.scala 207:35]
      _dmem_raw_WIRE_3 <= _dmem_raw_T_13 @[Core.scala 207:35]
      node _dmem_raw_T_14 = or(_dmem_raw_WIRE_3, UInt<12>("h0")) @[Core.scala 207:35]
      node _dmem_raw_T_15 = bits(_dmem_raw_T_14, 11, 0) @[Core.scala 207:35]
      read mport dmem_raw_MPORT_3 = dmem[_dmem_raw_T_15], clock @[Core.scala 207:35]
    node dmem_raw_lo = cat(dmem_raw_MPORT_1, dmem_raw_MPORT) @[Cat.scala 33:92]
    node dmem_raw_hi = cat(dmem_raw_MPORT_3, dmem_raw_MPORT_2) @[Cat.scala 33:92]
    node _dmem_raw_T_16 = cat(dmem_raw_hi, dmem_raw_lo) @[Cat.scala 33:92]
    dmem_raw <= _dmem_raw_T_16 @[Core.scala 206:12]
    load_ready <= UInt<1>("h0") @[Core.scala 211:14]
    node _T_35 = eq(opcode, UInt<5>("h4")) @[Core.scala 212:16]
    node _T_36 = eq(load_ready, UInt<1>("h0")) @[Core.scala 212:33]
    node _T_37 = and(_T_35, _T_36) @[Core.scala 212:30]
    when _T_37 : @[Core.scala 212:46]
      load_ready <= UInt<1>("h1") @[Core.scala 213:16]
    infer mport MPORT_14 = regfile[rd], clock @[Core.scala 216:10]
    node _T_38 = eq(rd, UInt<1>("h0")) @[Core.scala 217:9]
    node _T_39 = eq(opcode, UInt<5>("h3")) @[Core.scala 219:13]
    node _T_40 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 219:40]
    node _T_41 = and(_T_39, _T_40) @[Core.scala 219:26]
    node _T_42 = add(pc, UInt<3>("h6")) @[Core.scala 219:61]
    node _T_43 = tail(_T_42, 1) @[Core.scala 219:61]
    node _T_44 = eq(opcode, UInt<5>("h3")) @[Core.scala 220:13]
    node _T_45 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 220:40]
    node _T_46 = and(_T_44, _T_45) @[Core.scala 220:26]
    node _T_47 = add(pc, UInt<3>("h6")) @[Core.scala 220:61]
    node _T_48 = tail(_T_47, 1) @[Core.scala 220:61]
    node _T_49 = eq(opcode, UInt<5>("h3")) @[Core.scala 221:13]
    node _T_50 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 221:40]
    node _T_51 = and(_T_49, _T_50) @[Core.scala 221:26]
    node _T_52 = add(pc, UInt<3>("h6")) @[Core.scala 221:61]
    node _T_53 = tail(_T_52, 1) @[Core.scala 221:61]
    node _T_54 = eq(opcode, UInt<5>("h3")) @[Core.scala 222:13]
    node _T_55 = eq(opcode_sub, UInt<3>("h3")) @[Core.scala 222:40]
    node _T_56 = and(_T_54, _T_55) @[Core.scala 222:26]
    node _T_57 = add(pc, UInt<3>("h6")) @[Core.scala 222:61]
    node _T_58 = tail(_T_57, 1) @[Core.scala 222:61]
    node _T_59 = eq(opcode, UInt<5>("h3")) @[Core.scala 223:13]
    node _T_60 = eq(opcode_sub, UInt<3>("h4")) @[Core.scala 223:40]
    node _T_61 = and(_T_59, _T_60) @[Core.scala 223:26]
    node _T_62 = add(pc, UInt<3>("h6")) @[Core.scala 223:61]
    node _T_63 = tail(_T_62, 1) @[Core.scala 223:61]
    node _T_64 = eq(opcode, UInt<5>("h4")) @[Core.scala 225:13]
    node _T_65 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 225:40]
    node _T_66 = and(_T_64, _T_65) @[Core.scala 225:26]
    node _T_67 = eq(opcode, UInt<5>("h4")) @[Core.scala 226:13]
    node _T_68 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 226:40]
    node _T_69 = and(_T_67, _T_68) @[Core.scala 226:26]
    node _T_70 = bits(dmem_raw, 15, 15) @[Core.scala 226:78]
    node _T_71 = bits(_T_70, 0, 0) @[Bitwise.scala 77:15]
    node _T_72 = mux(_T_71, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _T_73 = bits(dmem_raw, 15, 0) @[Core.scala 226:93]
    node _T_74 = cat(_T_72, _T_73) @[Cat.scala 33:92]
    node _T_75 = eq(opcode, UInt<5>("h4")) @[Core.scala 227:13]
    node _T_76 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 227:40]
    node _T_77 = and(_T_75, _T_76) @[Core.scala 227:26]
    node _T_78 = bits(dmem_raw, 7, 7) @[Core.scala 227:78]
    node _T_79 = bits(_T_78, 0, 0) @[Bitwise.scala 77:15]
    node _T_80 = mux(_T_79, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
    node _T_81 = bits(dmem_raw, 7, 0) @[Core.scala 227:92]
    node _T_82 = cat(_T_80, _T_81) @[Cat.scala 33:92]
    node _T_83 = eq(opcode, UInt<5>("h4")) @[Core.scala 228:13]
    node _T_84 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 228:40]
    node _T_85 = and(_T_83, _T_84) @[Core.scala 228:26]
    node _T_86 = and(UInt<16>("hffff"), dmem_raw) @[Core.scala 228:67]
    node _T_87 = eq(opcode, UInt<5>("h4")) @[Core.scala 229:13]
    node _T_88 = eq(opcode_sub, UInt<3>("h2")) @[Core.scala 229:40]
    node _T_89 = and(_T_87, _T_88) @[Core.scala 229:26]
    node _T_90 = and(UInt<8>("hff"), dmem_raw) @[Core.scala 229:65]
    node _T_91 = eq(opcode, UInt<5>("h5")) @[Core.scala 231:13]
    infer mport MPORT_15 = regfile[rd], clock @[Core.scala 231:38]
    node _T_92 = eq(opcode, UInt<5>("h6")) @[Core.scala 233:13]
    node _T_93 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 233:40]
    node _T_94 = and(_T_92, _T_93) @[Core.scala 233:26]
    node _T_95 = and(_T_94, ioBus.io.din.valid) @[Core.scala 233:53]
    node _T_96 = eq(opcode, UInt<5>("h6")) @[Core.scala 234:13]
    node _T_97 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 234:40]
    node _T_98 = and(_T_96, _T_97) @[Core.scala 234:26]
    node _T_99 = eq(ioBus.io.din.valid, UInt<1>("h0")) @[Core.scala 234:56]
    node _T_100 = and(_T_98, _T_99) @[Core.scala 234:53]
    infer mport MPORT_16 = regfile[rd], clock @[Core.scala 234:88]
    node _T_101 = eq(opcode, UInt<5>("h6")) @[Core.scala 235:13]
    node _T_102 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 235:40]
    node _T_103 = and(_T_101, _T_102) @[Core.scala 235:26]
    infer mport MPORT_17 = regfile[rd], clock @[Core.scala 235:65]
    node _T_104 = mux(_T_103, MPORT_17, alu.io.out) @[Mux.scala 101:16]
    node _T_105 = mux(_T_100, MPORT_16, _T_104) @[Mux.scala 101:16]
    node _T_106 = mux(_T_95, ioBus.io.din.bits, _T_105) @[Mux.scala 101:16]
    node _T_107 = mux(_T_91, MPORT_15, _T_106) @[Mux.scala 101:16]
    node _T_108 = mux(_T_89, _T_90, _T_107) @[Mux.scala 101:16]
    node _T_109 = mux(_T_85, _T_86, _T_108) @[Mux.scala 101:16]
    node _T_110 = mux(_T_77, _T_82, _T_109) @[Mux.scala 101:16]
    node _T_111 = mux(_T_69, _T_74, _T_110) @[Mux.scala 101:16]
    node _T_112 = mux(_T_66, dmem_raw, _T_111) @[Mux.scala 101:16]
    node _T_113 = mux(_T_61, _T_63, _T_112) @[Mux.scala 101:16]
    node _T_114 = mux(_T_56, _T_58, _T_113) @[Mux.scala 101:16]
    node _T_115 = mux(_T_51, _T_53, _T_114) @[Mux.scala 101:16]
    node _T_116 = mux(_T_46, _T_48, _T_115) @[Mux.scala 101:16]
    node _T_117 = mux(_T_41, _T_43, _T_116) @[Mux.scala 101:16]
    node _T_118 = mux(_T_38, UInt<32>("h0"), _T_117) @[Mux.scala 101:16]
    MPORT_14 <= _T_118 @[Core.scala 216:18]
    ioBus.io.devId <= alu.io.out @[Core.scala 239:18]
    node _ioBus_io_din_ready_T = eq(opcode, UInt<5>("h6")) @[Core.scala 241:33]
    node _ioBus_io_din_ready_T_1 = eq(opcode_sub, UInt<3>("h0")) @[Core.scala 241:60]
    node _ioBus_io_din_ready_T_2 = and(_ioBus_io_din_ready_T, _ioBus_io_din_ready_T_1) @[Core.scala 241:46]
    ioBus.io.din.ready <= _ioBus_io_din_ready_T_2 @[Core.scala 241:22]
    node _ioBus_io_dout_valid_T = eq(opcode, UInt<5>("h6")) @[Core.scala 243:34]
    node _ioBus_io_dout_valid_T_1 = eq(opcode_sub, UInt<3>("h1")) @[Core.scala 243:61]
    node _ioBus_io_dout_valid_T_2 = and(_ioBus_io_dout_valid_T, _ioBus_io_dout_valid_T_1) @[Core.scala 243:47]
    ioBus.io.dout.valid <= _ioBus_io_dout_valid_T_2 @[Core.scala 243:23]
    infer mport ioBus_io_dout_bits_MPORT = regfile[rs2_s], clock @[Core.scala 244:32]
    ioBus.io.dout.bits <= ioBus_io_dout_bits_MPORT @[Core.scala 244:22]

